//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/ai/pending_embedding.proto (package bosca.ai, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message bosca.ai.PendingEmbedding
 */
export class PendingEmbedding extends Message<PendingEmbedding> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string content = 2;
   */
  content?: string;

  constructor(data?: PartialMessage<PendingEmbedding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.ai.PendingEmbedding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PendingEmbedding {
    return new PendingEmbedding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PendingEmbedding {
    return new PendingEmbedding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PendingEmbedding {
    return new PendingEmbedding().fromJsonString(jsonString, options);
  }

  static equals(a: PendingEmbedding | PlainMessage<PendingEmbedding> | undefined, b: PendingEmbedding | PlainMessage<PendingEmbedding> | undefined): boolean {
    return proto3.util.equals(PendingEmbedding, a, b);
  }
}

/**
 * @generated from message bosca.ai.PendingEmbeddings
 */
export class PendingEmbeddings extends Message<PendingEmbeddings> {
  /**
   * @generated from field: repeated bosca.ai.PendingEmbedding embedding = 2;
   */
  embedding: PendingEmbedding[] = [];

  constructor(data?: PartialMessage<PendingEmbeddings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.ai.PendingEmbeddings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "embedding", kind: "message", T: PendingEmbedding, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PendingEmbeddings {
    return new PendingEmbeddings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PendingEmbeddings {
    return new PendingEmbeddings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PendingEmbeddings {
    return new PendingEmbeddings().fromJsonString(jsonString, options);
  }

  static equals(a: PendingEmbeddings | PlainMessage<PendingEmbeddings> | undefined, b: PendingEmbeddings | PlainMessage<PendingEmbeddings> | undefined): boolean {
    return proto3.util.equals(PendingEmbeddings, a, b);
  }
}

