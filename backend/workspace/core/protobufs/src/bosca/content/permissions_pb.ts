//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/content/permissions.proto (package bosca.content, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum bosca.content.PermissionRelation
 */
export enum PermissionRelation {
  /**
   * @generated from enum value: viewers = 0;
   */
  viewers = 0,

  /**
   * @generated from enum value: discoverers = 1;
   */
  discoverers = 1,

  /**
   * @generated from enum value: editors = 2;
   */
  editors = 2,

  /**
   * @generated from enum value: managers = 3;
   */
  managers = 3,

  /**
   * @generated from enum value: serviceaccounts = 4;
   */
  serviceaccounts = 4,

  /**
   * @generated from enum value: owners = 5;
   */
  owners = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionRelation)
proto3.util.setEnumType(PermissionRelation, "bosca.content.PermissionRelation", [
  { no: 0, name: "viewers" },
  { no: 1, name: "discoverers" },
  { no: 2, name: "editors" },
  { no: 3, name: "managers" },
  { no: 4, name: "serviceaccounts" },
  { no: 5, name: "owners" },
]);

/**
 * @generated from enum bosca.content.PermissionAction
 */
export enum PermissionAction {
  /**
   * @generated from enum value: view = 0;
   */
  view = 0,

  /**
   * @generated from enum value: list = 2;
   */
  list = 2,

  /**
   * @generated from enum value: edit = 3;
   */
  edit = 3,

  /**
   * @generated from enum value: manage = 4;
   */
  manage = 4,

  /**
   * @generated from enum value: service = 5;
   */
  service = 5,

  /**
   * @generated from enum value: delete = 6;
   */
  delete = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionAction)
proto3.util.setEnumType(PermissionAction, "bosca.content.PermissionAction", [
  { no: 0, name: "view" },
  { no: 2, name: "list" },
  { no: 3, name: "edit" },
  { no: 4, name: "manage" },
  { no: 5, name: "service" },
  { no: 6, name: "delete" },
]);

/**
 * @generated from enum bosca.content.PermissionObjectType
 */
export enum PermissionObjectType {
  /**
   * @generated from enum value: unknown_object_type = 0;
   */
  unknown_object_type = 0,

  /**
   * @generated from enum value: collection_type = 1;
   */
  collection_type = 1,

  /**
   * @generated from enum value: metadata_type = 2;
   */
  metadata_type = 2,

  /**
   * @generated from enum value: system_resource_type = 3;
   */
  system_resource_type = 3,

  /**
   * @generated from enum value: workflow_type = 4;
   */
  workflow_type = 4,

  /**
   * @generated from enum value: workflow_state_type = 5;
   */
  workflow_state_type = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionObjectType)
proto3.util.setEnumType(PermissionObjectType, "bosca.content.PermissionObjectType", [
  { no: 0, name: "unknown_object_type" },
  { no: 1, name: "collection_type" },
  { no: 2, name: "metadata_type" },
  { no: 3, name: "system_resource_type" },
  { no: 4, name: "workflow_type" },
  { no: 5, name: "workflow_state_type" },
]);

/**
 * @generated from enum bosca.content.PermissionSubjectType
 */
export enum PermissionSubjectType {
  /**
   * @generated from enum value: unknown_subject_type = 0;
   */
  unknown_subject_type = 0,

  /**
   * @generated from enum value: user = 1;
   */
  user = 1,

  /**
   * @generated from enum value: group = 2;
   */
  group = 2,

  /**
   * @generated from enum value: service_account = 3;
   */
  service_account = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionSubjectType)
proto3.util.setEnumType(PermissionSubjectType, "bosca.content.PermissionSubjectType", [
  { no: 0, name: "unknown_subject_type" },
  { no: 1, name: "user" },
  { no: 2, name: "group" },
  { no: 3, name: "service_account" },
]);

/**
 * @generated from message bosca.content.PermissionCheckRequest
 */
export class PermissionCheckRequest extends Message<PermissionCheckRequest> {
  /**
   * @generated from field: string object = 1;
   */
  object = "";

  /**
   * @generated from field: bosca.content.PermissionObjectType object_type = 2;
   */
  objectType = PermissionObjectType.unknown_object_type;

  /**
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * @generated from field: bosca.content.PermissionSubjectType subject_type = 4;
   */
  subjectType = PermissionSubjectType.unknown_subject_type;

  /**
   * @generated from field: bosca.content.PermissionAction action = 5;
   */
  action = PermissionAction.view;

  constructor(data?: PartialMessage<PermissionCheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.PermissionCheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_type", kind: "enum", T: proto3.getEnumType(PermissionObjectType) },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "enum", T: proto3.getEnumType(PermissionSubjectType) },
    { no: 5, name: "action", kind: "enum", T: proto3.getEnumType(PermissionAction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionCheckRequest {
    return new PermissionCheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionCheckRequest {
    return new PermissionCheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionCheckRequest {
    return new PermissionCheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionCheckRequest | PlainMessage<PermissionCheckRequest> | undefined, b: PermissionCheckRequest | PlainMessage<PermissionCheckRequest> | undefined): boolean {
    return proto3.util.equals(PermissionCheckRequest, a, b);
  }
}

/**
 * @generated from message bosca.content.PermissionCheckResponse
 */
export class PermissionCheckResponse extends Message<PermissionCheckResponse> {
  /**
   * @generated from field: bool allowed = 1;
   */
  allowed = false;

  constructor(data?: PartialMessage<PermissionCheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.PermissionCheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionCheckResponse {
    return new PermissionCheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionCheckResponse {
    return new PermissionCheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionCheckResponse {
    return new PermissionCheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionCheckResponse | PlainMessage<PermissionCheckResponse> | undefined, b: PermissionCheckResponse | PlainMessage<PermissionCheckResponse> | undefined): boolean {
    return proto3.util.equals(PermissionCheckResponse, a, b);
  }
}

/**
 * @generated from message bosca.content.Permissions
 */
export class Permissions extends Message<Permissions> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated bosca.content.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  constructor(data?: PartialMessage<Permissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.Permissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: Permission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permissions {
    return new Permissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permissions {
    return new Permissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permissions {
    return new Permissions().fromJsonString(jsonString, options);
  }

  static equals(a: Permissions | PlainMessage<Permissions> | undefined, b: Permissions | PlainMessage<Permissions> | undefined): boolean {
    return proto3.util.equals(Permissions, a, b);
  }
}

/**
 * @generated from message bosca.content.Permission
 */
export class Permission extends Message<Permission> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string subject = 2;
   */
  subject = "";

  /**
   * @generated from field: bosca.content.PermissionSubjectType subject_type = 3;
   */
  subjectType = PermissionSubjectType.unknown_subject_type;

  /**
   * @generated from field: bosca.content.PermissionRelation relation = 5;
   */
  relation = PermissionRelation.viewers;

  constructor(data?: PartialMessage<Permission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.Permission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject_type", kind: "enum", T: proto3.getEnumType(PermissionSubjectType) },
    { no: 5, name: "relation", kind: "enum", T: proto3.getEnumType(PermissionRelation) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permission {
    return new Permission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJsonString(jsonString, options);
  }

  static equals(a: Permission | PlainMessage<Permission> | undefined, b: Permission | PlainMessage<Permission> | undefined): boolean {
    return proto3.util.equals(Permission, a, b);
  }
}

