//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/content/traits.proto (package bosca.content, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message bosca.content.Traits
 */
export class Traits extends Message<Traits> {
  /**
   * @generated from field: repeated bosca.content.Trait traits = 1;
   */
  traits: Trait[] = [];

  constructor(data?: PartialMessage<Traits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.Traits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "traits", kind: "message", T: Trait, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Traits {
    return new Traits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Traits {
    return new Traits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Traits {
    return new Traits().fromJsonString(jsonString, options);
  }

  static equals(a: Traits | PlainMessage<Traits> | undefined, b: Traits | PlainMessage<Traits> | undefined): boolean {
    return proto3.util.equals(Traits, a, b);
  }
}

/**
 * @generated from message bosca.content.Trait
 */
export class Trait extends Message<Trait> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated string workflow_ids = 4;
   */
  workflowIds: string[] = [];

  constructor(data?: PartialMessage<Trait>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.Trait";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "workflow_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trait {
    return new Trait().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trait {
    return new Trait().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trait {
    return new Trait().fromJsonString(jsonString, options);
  }

  static equals(a: Trait | PlainMessage<Trait> | undefined, b: Trait | PlainMessage<Trait> | undefined): boolean {
    return proto3.util.equals(Trait, a, b);
  }
}

/**
 * @generated from message bosca.content.TraitWorkflowIdRequest
 */
export class TraitWorkflowIdRequest extends Message<TraitWorkflowIdRequest> {
  /**
   * @generated from field: string trait_id = 1;
   */
  traitId = "";

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  constructor(data?: PartialMessage<TraitWorkflowIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.TraitWorkflowIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trait_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TraitWorkflowIdRequest {
    return new TraitWorkflowIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TraitWorkflowIdRequest {
    return new TraitWorkflowIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TraitWorkflowIdRequest {
    return new TraitWorkflowIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TraitWorkflowIdRequest | PlainMessage<TraitWorkflowIdRequest> | undefined, b: TraitWorkflowIdRequest | PlainMessage<TraitWorkflowIdRequest> | undefined): boolean {
    return proto3.util.equals(TraitWorkflowIdRequest, a, b);
  }
}

/**
 * @generated from message bosca.content.TraitWorkflowActivityIdRequest
 */
export class TraitWorkflowActivityIdRequest extends Message<TraitWorkflowActivityIdRequest> {
  /**
   * @generated from field: string trait_id = 1;
   */
  traitId = "";

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: string activity_id = 3;
   */
  activityId = "";

  constructor(data?: PartialMessage<TraitWorkflowActivityIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.TraitWorkflowActivityIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trait_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "activity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TraitWorkflowActivityIdRequest {
    return new TraitWorkflowActivityIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TraitWorkflowActivityIdRequest {
    return new TraitWorkflowActivityIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TraitWorkflowActivityIdRequest {
    return new TraitWorkflowActivityIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TraitWorkflowActivityIdRequest | PlainMessage<TraitWorkflowActivityIdRequest> | undefined, b: TraitWorkflowActivityIdRequest | PlainMessage<TraitWorkflowActivityIdRequest> | undefined): boolean {
    return proto3.util.equals(TraitWorkflowActivityIdRequest, a, b);
  }
}

