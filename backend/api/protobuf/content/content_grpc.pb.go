//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: content/content.proto

package content

import (
	protobuf "bosca.io/api/protobuf"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentService_GetRootCollectionItems_FullMethodName              = "/bosca.content.ContentService/GetRootCollectionItems"
	ContentService_GetCollectionItems_FullMethodName                  = "/bosca.content.ContentService/GetCollectionItems"
	ContentService_AddCollection_FullMethodName                       = "/bosca.content.ContentService/AddCollection"
	ContentService_GetCollection_FullMethodName                       = "/bosca.content.ContentService/GetCollection"
	ContentService_DeleteCollection_FullMethodName                    = "/bosca.content.ContentService/DeleteCollection"
	ContentService_GetCollectionPermissions_FullMethodName            = "/bosca.content.ContentService/GetCollectionPermissions"
	ContentService_AddCollectionPermission_FullMethodName             = "/bosca.content.ContentService/AddCollectionPermission"
	ContentService_CheckPermission_FullMethodName                     = "/bosca.content.ContentService/CheckPermission"
	ContentService_GetMetadata_FullMethodName                         = "/bosca.content.ContentService/GetMetadata"
	ContentService_GetMetadatas_FullMethodName                        = "/bosca.content.ContentService/GetMetadatas"
	ContentService_AddMetadata_FullMethodName                         = "/bosca.content.ContentService/AddMetadata"
	ContentService_DeleteMetadata_FullMethodName                      = "/bosca.content.ContentService/DeleteMetadata"
	ContentService_GetMetadataUploadUrl_FullMethodName                = "/bosca.content.ContentService/GetMetadataUploadUrl"
	ContentService_GetMetadataDownloadUrl_FullMethodName              = "/bosca.content.ContentService/GetMetadataDownloadUrl"
	ContentService_AddMetadataSupplementary_FullMethodName            = "/bosca.content.ContentService/AddMetadataSupplementary"
	ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName = "/bosca.content.ContentService/GetMetadataSupplementaryDownloadUrl"
	ContentService_DeleteMetadataSupplementary_FullMethodName         = "/bosca.content.ContentService/DeleteMetadataSupplementary"
	ContentService_SetMetadataUploaded_FullMethodName                 = "/bosca.content.ContentService/SetMetadataUploaded"
	ContentService_GetMetadataPermissions_FullMethodName              = "/bosca.content.ContentService/GetMetadataPermissions"
	ContentService_AddMetadataPermissions_FullMethodName              = "/bosca.content.ContentService/AddMetadataPermissions"
	ContentService_AddMetadataPermission_FullMethodName               = "/bosca.content.ContentService/AddMetadataPermission"
	ContentService_SetMetadataStatus_FullMethodName                   = "/bosca.content.ContentService/SetMetadataStatus"
	ContentService_ProcessMetadata_FullMethodName                     = "/bosca.content.ContentService/ProcessMetadata"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	GetRootCollectionItems(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*CollectionItems, error)
	GetCollectionItems(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*CollectionItems, error)
	AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*protobuf.IdResponse, error)
	GetCollection(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Collection, error)
	DeleteCollection(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	GetCollectionPermissions(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Permissions, error)
	AddCollectionPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*protobuf.Empty, error)
	CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error)
	GetMetadata(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Metadata, error)
	GetMetadatas(ctx context.Context, in *protobuf.IdsRequest, opts ...grpc.CallOption) (*Metadatas, error)
	AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*protobuf.IdResponse, error)
	DeleteMetadata(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	GetMetadataUploadUrl(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GetMetadataDownloadUrl(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	AddMetadataSupplementary(ctx context.Context, in *AddSupplementaryRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GetMetadataSupplementaryDownloadUrl(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	DeleteMetadataSupplementary(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	SetMetadataUploaded(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	GetMetadataPermissions(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Permissions, error)
	AddMetadataPermissions(ctx context.Context, in *Permissions, opts ...grpc.CallOption) (*protobuf.Empty, error)
	AddMetadataPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*protobuf.Empty, error)
	SetMetadataStatus(ctx context.Context, in *SetMetadataStatusRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	ProcessMetadata(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) GetRootCollectionItems(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*CollectionItems, error) {
	out := new(CollectionItems)
	err := c.cc.Invoke(ctx, ContentService_GetRootCollectionItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollectionItems(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*CollectionItems, error) {
	out := new(CollectionItems)
	err := c.cc.Invoke(ctx, ContentService_GetCollectionItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*protobuf.IdResponse, error) {
	out := new(protobuf.IdResponse)
	err := c.cc.Invoke(ctx, ContentService_AddCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollection(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, ContentService_GetCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteCollection(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollectionPermissions(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, ContentService_GetCollectionPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollectionPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddCollectionPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error) {
	out := new(PermissionCheckResponse)
	err := c.cc.Invoke(ctx, ContentService_CheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadata(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := c.cc.Invoke(ctx, ContentService_GetMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadatas(ctx context.Context, in *protobuf.IdsRequest, opts ...grpc.CallOption) (*Metadatas, error) {
	out := new(Metadatas)
	err := c.cc.Invoke(ctx, ContentService_GetMetadatas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*protobuf.IdResponse, error) {
	out := new(protobuf.IdResponse)
	err := c.cc.Invoke(ctx, ContentService_AddMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteMetadata(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataUploadUrl(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataUploadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataDownloadUrl(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataSupplementary(ctx context.Context, in *AddSupplementaryRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataSupplementary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataSupplementaryDownloadUrl(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteMetadataSupplementary(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteMetadataSupplementary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetMetadataUploaded(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetMetadataUploaded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataPermissions(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataPermissions(ctx context.Context, in *Permissions, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetMetadataStatus(ctx context.Context, in *SetMetadataStatusRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetMetadataStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ProcessMetadata(ctx context.Context, in *protobuf.IdRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, ContentService_ProcessMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	GetRootCollectionItems(context.Context, *protobuf.Empty) (*CollectionItems, error)
	GetCollectionItems(context.Context, *protobuf.IdRequest) (*CollectionItems, error)
	AddCollection(context.Context, *AddCollectionRequest) (*protobuf.IdResponse, error)
	GetCollection(context.Context, *protobuf.IdRequest) (*Collection, error)
	DeleteCollection(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error)
	GetCollectionPermissions(context.Context, *protobuf.IdRequest) (*Permissions, error)
	AddCollectionPermission(context.Context, *Permission) (*protobuf.Empty, error)
	CheckPermission(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error)
	GetMetadata(context.Context, *protobuf.IdRequest) (*Metadata, error)
	GetMetadatas(context.Context, *protobuf.IdsRequest) (*Metadatas, error)
	AddMetadata(context.Context, *AddMetadataRequest) (*protobuf.IdResponse, error)
	DeleteMetadata(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error)
	GetMetadataUploadUrl(context.Context, *protobuf.IdRequest) (*SignedUrl, error)
	GetMetadataDownloadUrl(context.Context, *protobuf.IdRequest) (*SignedUrl, error)
	AddMetadataSupplementary(context.Context, *AddSupplementaryRequest) (*SignedUrl, error)
	GetMetadataSupplementaryDownloadUrl(context.Context, *SupplementaryIdRequest) (*SignedUrl, error)
	DeleteMetadataSupplementary(context.Context, *SupplementaryIdRequest) (*protobuf.Empty, error)
	SetMetadataUploaded(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error)
	GetMetadataPermissions(context.Context, *protobuf.IdRequest) (*Permissions, error)
	AddMetadataPermissions(context.Context, *Permissions) (*protobuf.Empty, error)
	AddMetadataPermission(context.Context, *Permission) (*protobuf.Empty, error)
	SetMetadataStatus(context.Context, *SetMetadataStatusRequest) (*protobuf.Empty, error)
	ProcessMetadata(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) GetRootCollectionItems(context.Context, *protobuf.Empty) (*CollectionItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootCollectionItems not implemented")
}
func (UnimplementedContentServiceServer) GetCollectionItems(context.Context, *protobuf.IdRequest) (*CollectionItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionItems not implemented")
}
func (UnimplementedContentServiceServer) AddCollection(context.Context, *AddCollectionRequest) (*protobuf.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollection not implemented")
}
func (UnimplementedContentServiceServer) GetCollection(context.Context, *protobuf.IdRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedContentServiceServer) DeleteCollection(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedContentServiceServer) GetCollectionPermissions(context.Context, *protobuf.IdRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddCollectionPermission(context.Context, *Permission) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionPermission not implemented")
}
func (UnimplementedContentServiceServer) CheckPermission(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedContentServiceServer) GetMetadata(context.Context, *protobuf.IdRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadatas(context.Context, *protobuf.IdsRequest) (*Metadatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadatas not implemented")
}
func (UnimplementedContentServiceServer) AddMetadata(context.Context, *AddMetadataRequest) (*protobuf.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadata not implemented")
}
func (UnimplementedContentServiceServer) DeleteMetadata(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataUploadUrl(context.Context, *protobuf.IdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataUploadUrl not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataDownloadUrl(context.Context, *protobuf.IdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataDownloadUrl not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataSupplementary(context.Context, *AddSupplementaryRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataSupplementary not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataSupplementaryDownloadUrl(context.Context, *SupplementaryIdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataSupplementaryDownloadUrl not implemented")
}
func (UnimplementedContentServiceServer) DeleteMetadataSupplementary(context.Context, *SupplementaryIdRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadataSupplementary not implemented")
}
func (UnimplementedContentServiceServer) SetMetadataUploaded(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataUploaded not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataPermissions(context.Context, *protobuf.IdRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataPermissions(context.Context, *Permissions) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataPermission(context.Context, *Permission) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataPermission not implemented")
}
func (UnimplementedContentServiceServer) SetMetadataStatus(context.Context, *SetMetadataStatusRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataStatus not implemented")
}
func (UnimplementedContentServiceServer) ProcessMetadata(context.Context, *protobuf.IdRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMetadata not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_GetRootCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetRootCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetRootCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetRootCollectionItems(ctx, req.(*protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollectionItems(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollection(ctx, req.(*AddCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollection(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteCollection(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollectionPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollectionPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollectionPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollectionPermissions(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollectionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollectionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollectionPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollectionPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CheckPermission(ctx, req.(*PermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadata(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadatas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadatas(ctx, req.(*protobuf.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadata(ctx, req.(*AddMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteMetadata(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataUploadUrl(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataDownloadUrl(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataSupplementary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSupplementaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataSupplementary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataSupplementary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataSupplementary(ctx, req.(*AddSupplementaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataSupplementaryDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataSupplementaryDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataSupplementaryDownloadUrl(ctx, req.(*SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteMetadataSupplementary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteMetadataSupplementary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteMetadataSupplementary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteMetadataSupplementary(ctx, req.(*SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetMetadataUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetMetadataUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetMetadataUploaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetMetadataUploaded(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataPermissions(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataPermissions(ctx, req.(*Permissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetMetadataStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetadataStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetMetadataStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetMetadataStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetMetadataStatus(ctx, req.(*SetMetadataStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ProcessMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ProcessMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ProcessMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ProcessMetadata(ctx, req.(*protobuf.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosca.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootCollectionItems",
			Handler:    _ContentService_GetRootCollectionItems_Handler,
		},
		{
			MethodName: "GetCollectionItems",
			Handler:    _ContentService_GetCollectionItems_Handler,
		},
		{
			MethodName: "AddCollection",
			Handler:    _ContentService_AddCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _ContentService_GetCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _ContentService_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollectionPermissions",
			Handler:    _ContentService_GetCollectionPermissions_Handler,
		},
		{
			MethodName: "AddCollectionPermission",
			Handler:    _ContentService_AddCollectionPermission_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _ContentService_CheckPermission_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ContentService_GetMetadata_Handler,
		},
		{
			MethodName: "GetMetadatas",
			Handler:    _ContentService_GetMetadatas_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _ContentService_AddMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _ContentService_DeleteMetadata_Handler,
		},
		{
			MethodName: "GetMetadataUploadUrl",
			Handler:    _ContentService_GetMetadataUploadUrl_Handler,
		},
		{
			MethodName: "GetMetadataDownloadUrl",
			Handler:    _ContentService_GetMetadataDownloadUrl_Handler,
		},
		{
			MethodName: "AddMetadataSupplementary",
			Handler:    _ContentService_AddMetadataSupplementary_Handler,
		},
		{
			MethodName: "GetMetadataSupplementaryDownloadUrl",
			Handler:    _ContentService_GetMetadataSupplementaryDownloadUrl_Handler,
		},
		{
			MethodName: "DeleteMetadataSupplementary",
			Handler:    _ContentService_DeleteMetadataSupplementary_Handler,
		},
		{
			MethodName: "SetMetadataUploaded",
			Handler:    _ContentService_SetMetadataUploaded_Handler,
		},
		{
			MethodName: "GetMetadataPermissions",
			Handler:    _ContentService_GetMetadataPermissions_Handler,
		},
		{
			MethodName: "AddMetadataPermissions",
			Handler:    _ContentService_AddMetadataPermissions_Handler,
		},
		{
			MethodName: "AddMetadataPermission",
			Handler:    _ContentService_AddMetadataPermission_Handler,
		},
		{
			MethodName: "SetMetadataStatus",
			Handler:    _ContentService_SetMetadataStatus_Handler,
		},
		{
			MethodName: "ProcessMetadata",
			Handler:    _ContentService_ProcessMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/content.proto",
}
