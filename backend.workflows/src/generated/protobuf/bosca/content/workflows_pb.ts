//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/content/workflows.proto (package bosca.content, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata } from "./metadata_pb";
import { StorageSystem, StorageSystemModel } from "./storage_systems_pb";
import { Model } from "./model_pb";
import { Prompt } from "./prompts_pb";

/**
 * @generated from enum bosca.content.WorkflowActivityParameterType
 */
export enum WorkflowActivityParameterType {
  /**
   * @generated from enum value: unknown_activity_parameter_type = 0;
   */
  unknown_activity_parameter_type = 0,

  /**
   * @generated from enum value: context = 1;
   */
  context = 1,

  /**
   * @generated from enum value: supplementary = 2;
   */
  supplementary = 2,

  /**
   * @generated from enum value: supplementary_array = 3;
   */
  supplementary_array = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkflowActivityParameterType)
proto3.util.setEnumType(WorkflowActivityParameterType, "bosca.content.WorkflowActivityParameterType", [
  { no: 0, name: "unknown_activity_parameter_type" },
  { no: 1, name: "context" },
  { no: 2, name: "supplementary" },
  { no: 3, name: "supplementary_array" },
]);

/**
 * @generated from enum bosca.content.WorkflowStateType
 */
export enum WorkflowStateType {
  /**
   * @generated from enum value: unknown_workflow_type = 0;
   */
  unknown_workflow_type = 0,

  /**
   * @generated from enum value: processing = 1;
   */
  processing = 1,

  /**
   * @generated from enum value: draft = 2;
   */
  draft = 2,

  /**
   * @generated from enum value: pending = 3;
   */
  pending = 3,

  /**
   * @generated from enum value: approval = 4;
   */
  approval = 4,

  /**
   * @generated from enum value: approved = 5;
   */
  approved = 5,

  /**
   * @generated from enum value: published = 6;
   */
  published = 6,

  /**
   * @generated from enum value: failure = 7;
   */
  failure = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkflowStateType)
proto3.util.setEnumType(WorkflowStateType, "bosca.content.WorkflowStateType", [
  { no: 0, name: "unknown_workflow_type" },
  { no: 1, name: "processing" },
  { no: 2, name: "draft" },
  { no: 3, name: "pending" },
  { no: 4, name: "approval" },
  { no: 5, name: "approved" },
  { no: 6, name: "published" },
  { no: 7, name: "failure" },
]);

/**
 * @generated from message bosca.content.Workflows
 */
export class Workflows extends Message<Workflows> {
  /**
   * @generated from field: repeated bosca.content.Workflow workflows = 1;
   */
  workflows: Workflow[] = [];

  constructor(data?: PartialMessage<Workflows>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.Workflows";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflows", kind: "message", T: Workflow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workflows {
    return new Workflows().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workflows {
    return new Workflows().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workflows {
    return new Workflows().fromJsonString(jsonString, options);
  }

  static equals(a: Workflows | PlainMessage<Workflows> | undefined, b: Workflows | PlainMessage<Workflows> | undefined): boolean {
    return proto3.util.equals(Workflows, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivity
 */
export class WorkflowActivity extends Message<WorkflowActivity> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: bool child_workflow = 4;
   */
  childWorkflow = false;

  /**
   * @generated from field: optional string child_workflow_queue = 5;
   */
  childWorkflowQueue?: string;

  /**
   * @generated from field: map<string, string> configuration = 6;
   */
  configuration: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, bosca.content.WorkflowActivityParameterType> inputs = 7;
   */
  inputs: { [key: string]: WorkflowActivityParameterType } = {};

  /**
   * @generated from field: map<string, bosca.content.WorkflowActivityParameterType> outputs = 8;
   */
  outputs: { [key: string]: WorkflowActivityParameterType } = {};

  constructor(data?: PartialMessage<WorkflowActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "child_workflow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "child_workflow_queue", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(WorkflowActivityParameterType)} },
    { no: 8, name: "outputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(WorkflowActivityParameterType)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivity {
    return new WorkflowActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivity {
    return new WorkflowActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivity {
    return new WorkflowActivity().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivity | PlainMessage<WorkflowActivity> | undefined, b: WorkflowActivity | PlainMessage<WorkflowActivity> | undefined): boolean {
    return proto3.util.equals(WorkflowActivity, a, b);
  }
}

/**
 * @generated from message bosca.content.Workflow
 */
export class Workflow extends Message<Workflow> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string queue = 4;
   */
  queue = "";

  /**
   * @generated from field: map<string, string> configuration = 5;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Workflow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.Workflow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workflow {
    return new Workflow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workflow {
    return new Workflow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workflow {
    return new Workflow().fromJsonString(jsonString, options);
  }

  static equals(a: Workflow | PlainMessage<Workflow> | undefined, b: Workflow | PlainMessage<Workflow> | undefined): boolean {
    return proto3.util.equals(Workflow, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowStates
 */
export class WorkflowStates extends Message<WorkflowStates> {
  /**
   * @generated from field: repeated bosca.content.WorkflowState states = 1;
   */
  states: WorkflowState[] = [];

  constructor(data?: PartialMessage<WorkflowStates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowStates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "states", kind: "message", T: WorkflowState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowStates {
    return new WorkflowStates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowStates {
    return new WorkflowStates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowStates {
    return new WorkflowStates().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowStates | PlainMessage<WorkflowStates> | undefined, b: WorkflowStates | PlainMessage<WorkflowStates> | undefined): boolean {
    return proto3.util.equals(WorkflowStates, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowState
 */
export class WorkflowState extends Message<WorkflowState> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: bosca.content.WorkflowStateType type = 4;
   */
  type = WorkflowStateType.unknown_workflow_type;

  /**
   * @generated from field: map<string, string> configuration = 5;
   */
  configuration: { [key: string]: string } = {};

  /**
   * @generated from field: optional string workflow_id = 6;
   */
  workflowId?: string;

  /**
   * @generated from field: optional string entry_workflow_id = 7;
   */
  entryWorkflowId?: string;

  /**
   * @generated from field: optional string exit_workflow_id = 8;
   */
  exitWorkflowId?: string;

  constructor(data?: PartialMessage<WorkflowState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(WorkflowStateType) },
    { no: 5, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "entry_workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "exit_workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowState {
    return new WorkflowState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowState {
    return new WorkflowState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowState {
    return new WorkflowState().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowState | PlainMessage<WorkflowState> | undefined, b: WorkflowState | PlainMessage<WorkflowState> | undefined): boolean {
    return proto3.util.equals(WorkflowState, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowStateTransitions
 */
export class WorkflowStateTransitions extends Message<WorkflowStateTransitions> {
  /**
   * @generated from field: repeated bosca.content.WorkflowStateTransition transitions = 1;
   */
  transitions: WorkflowStateTransition[] = [];

  constructor(data?: PartialMessage<WorkflowStateTransitions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowStateTransitions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transitions", kind: "message", T: WorkflowStateTransition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowStateTransitions {
    return new WorkflowStateTransitions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowStateTransitions {
    return new WorkflowStateTransitions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowStateTransitions {
    return new WorkflowStateTransitions().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowStateTransitions | PlainMessage<WorkflowStateTransitions> | undefined, b: WorkflowStateTransitions | PlainMessage<WorkflowStateTransitions> | undefined): boolean {
    return proto3.util.equals(WorkflowStateTransitions, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowStateTransition
 */
export class WorkflowStateTransition extends Message<WorkflowStateTransition> {
  /**
   * @generated from field: string from_state_id = 1;
   */
  fromStateId = "";

  /**
   * @generated from field: string to_state_id = 2;
   */
  toStateId = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<WorkflowStateTransition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowStateTransition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_state_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_state_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowStateTransition {
    return new WorkflowStateTransition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowStateTransition {
    return new WorkflowStateTransition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowStateTransition {
    return new WorkflowStateTransition().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowStateTransition | PlainMessage<WorkflowStateTransition> | undefined, b: WorkflowStateTransition | PlainMessage<WorkflowStateTransition> | undefined): boolean {
    return proto3.util.equals(WorkflowStateTransition, a, b);
  }
}

/**
 * @generated from message bosca.content.TransitionWorkflowRequest
 */
export class TransitionWorkflowRequest extends Message<TransitionWorkflowRequest> {
  /**
   * @generated from field: string metadata_id = 1;
   */
  metadataId = "";

  /**
   * @generated from field: string state_id = 2;
   */
  stateId = "";

  /**
   * @generated from field: string status = 3;
   */
  status = "";

  /**
   * @generated from field: bool retry = 4;
   */
  retry = false;

  constructor(data?: PartialMessage<TransitionWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.TransitionWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "retry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransitionWorkflowRequest {
    return new TransitionWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransitionWorkflowRequest {
    return new TransitionWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransitionWorkflowRequest {
    return new TransitionWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TransitionWorkflowRequest | PlainMessage<TransitionWorkflowRequest> | undefined, b: TransitionWorkflowRequest | PlainMessage<TransitionWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(TransitionWorkflowRequest, a, b);
  }
}

/**
 * @generated from message bosca.content.CompleteTransitionWorkflowRequest
 */
export class CompleteTransitionWorkflowRequest extends Message<CompleteTransitionWorkflowRequest> {
  /**
   * @generated from field: string metadata_id = 1;
   */
  metadataId = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<CompleteTransitionWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.CompleteTransitionWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteTransitionWorkflowRequest {
    return new CompleteTransitionWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteTransitionWorkflowRequest {
    return new CompleteTransitionWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteTransitionWorkflowRequest {
    return new CompleteTransitionWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CompleteTransitionWorkflowRequest | PlainMessage<CompleteTransitionWorkflowRequest> | undefined, b: CompleteTransitionWorkflowRequest | PlainMessage<CompleteTransitionWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(CompleteTransitionWorkflowRequest, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityParameterValue
 */
export class WorkflowActivityParameterValue extends Message<WorkflowActivityParameterValue> {
  /**
   * @generated from oneof bosca.content.WorkflowActivityParameterValue.value
   */
  value: {
    /**
     * @generated from field: string single_value = 1;
     */
    value: string;
    case: "singleValue";
  } | {
    /**
     * @generated from field: bosca.content.WorkflowActivityParameterValues array_value = 2;
     */
    value: WorkflowActivityParameterValues;
    case: "arrayValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WorkflowActivityParameterValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityParameterValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "single_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "array_value", kind: "message", T: WorkflowActivityParameterValues, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityParameterValue {
    return new WorkflowActivityParameterValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValue {
    return new WorkflowActivityParameterValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValue {
    return new WorkflowActivityParameterValue().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityParameterValue | PlainMessage<WorkflowActivityParameterValue> | undefined, b: WorkflowActivityParameterValue | PlainMessage<WorkflowActivityParameterValue> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityParameterValue, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityParameterValues
 */
export class WorkflowActivityParameterValues extends Message<WorkflowActivityParameterValues> {
  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<WorkflowActivityParameterValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityParameterValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityParameterValues {
    return new WorkflowActivityParameterValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValues {
    return new WorkflowActivityParameterValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValues {
    return new WorkflowActivityParameterValues().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityParameterValues | PlainMessage<WorkflowActivityParameterValues> | undefined, b: WorkflowActivityParameterValues | PlainMessage<WorkflowActivityParameterValues> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityParameterValues, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityInstance
 */
export class WorkflowActivityInstance extends Message<WorkflowActivityInstance> {
  /**
   * @generated from field: int64 instance_id = 1;
   */
  instanceId = protoInt64.zero;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: bool child_workflow = 3;
   */
  childWorkflow = false;

  /**
   * @generated from field: optional string child_workflow_queue = 4;
   */
  childWorkflowQueue?: string;

  /**
   * @generated from field: int32 execution_group = 5;
   */
  executionGroup = 0;

  /**
   * @generated from field: repeated bosca.content.WorkflowActivityPrompt prompts = 6;
   */
  prompts: WorkflowActivityPrompt[] = [];

  /**
   * @generated from field: repeated bosca.content.WorkflowActivityStorageSystem storage_systems = 7;
   */
  storageSystems: WorkflowActivityStorageSystem[] = [];

  /**
   * @generated from field: repeated bosca.content.WorkflowActivityModel models = 8;
   */
  models: WorkflowActivityModel[] = [];

  /**
   * @generated from field: map<string, string> configuration = 9;
   */
  configuration: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, bosca.content.WorkflowActivityParameterValue> inputs = 10;
   */
  inputs: { [key: string]: WorkflowActivityParameterValue } = {};

  /**
   * @generated from field: map<string, bosca.content.WorkflowActivityParameterValue> outputs = 11;
   */
  outputs: { [key: string]: WorkflowActivityParameterValue } = {};

  constructor(data?: PartialMessage<WorkflowActivityInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "child_workflow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "child_workflow_queue", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "execution_group", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "prompts", kind: "message", T: WorkflowActivityPrompt, repeated: true },
    { no: 7, name: "storage_systems", kind: "message", T: WorkflowActivityStorageSystem, repeated: true },
    { no: 8, name: "models", kind: "message", T: WorkflowActivityModel, repeated: true },
    { no: 9, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: WorkflowActivityParameterValue} },
    { no: 11, name: "outputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: WorkflowActivityParameterValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityInstance {
    return new WorkflowActivityInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityInstance {
    return new WorkflowActivityInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityInstance {
    return new WorkflowActivityInstance().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityInstance | PlainMessage<WorkflowActivityInstance> | undefined, b: WorkflowActivityInstance | PlainMessage<WorkflowActivityInstance> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityInstance, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityInstances
 */
export class WorkflowActivityInstances extends Message<WorkflowActivityInstances> {
  /**
   * @generated from field: repeated bosca.content.WorkflowActivityInstance instances = 1;
   */
  instances: WorkflowActivityInstance[] = [];

  constructor(data?: PartialMessage<WorkflowActivityInstances>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityInstances";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: WorkflowActivityInstance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityInstances {
    return new WorkflowActivityInstances().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityInstances {
    return new WorkflowActivityInstances().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityInstances {
    return new WorkflowActivityInstances().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityInstances | PlainMessage<WorkflowActivityInstances> | undefined, b: WorkflowActivityInstances | PlainMessage<WorkflowActivityInstances> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityInstances, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityIdRequest
 */
export class WorkflowActivityIdRequest extends Message<WorkflowActivityIdRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: string activity_id = 2;
   */
  activityId = "";

  constructor(data?: PartialMessage<WorkflowActivityIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityIdRequest {
    return new WorkflowActivityIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityIdRequest {
    return new WorkflowActivityIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityIdRequest {
    return new WorkflowActivityIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityIdRequest | PlainMessage<WorkflowActivityIdRequest> | undefined, b: WorkflowActivityIdRequest | PlainMessage<WorkflowActivityIdRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityIdRequest, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityExecutionContext
 */
export class WorkflowActivityExecutionContext extends Message<WorkflowActivityExecutionContext> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: repeated bosca.content.WorkflowActivityInstance activities = 2;
   */
  activities: WorkflowActivityInstance[] = [];

  /**
   * @generated from field: int32 current_activity_index = 3;
   */
  currentActivityIndex = 0;

  /**
   * @generated from field: bosca.content.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * @generated from field: map<string, bosca.content.WorkflowActivityParameterValue> context = 5;
   */
  context: { [key: string]: WorkflowActivityParameterValue } = {};

  constructor(data?: PartialMessage<WorkflowActivityExecutionContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityExecutionContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activities", kind: "message", T: WorkflowActivityInstance, repeated: true },
    { no: 3, name: "current_activity_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: WorkflowActivityParameterValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityExecutionContext {
    return new WorkflowActivityExecutionContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityExecutionContext {
    return new WorkflowActivityExecutionContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityExecutionContext {
    return new WorkflowActivityExecutionContext().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityExecutionContext | PlainMessage<WorkflowActivityExecutionContext> | undefined, b: WorkflowActivityExecutionContext | PlainMessage<WorkflowActivityExecutionContext> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityExecutionContext, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityStorageSystem
 */
export class WorkflowActivityStorageSystem extends Message<WorkflowActivityStorageSystem> {
  /**
   * @generated from field: bosca.content.StorageSystem storage_system = 1;
   */
  storageSystem?: StorageSystem;

  /**
   * @generated from field: repeated bosca.content.StorageSystemModel models = 2;
   */
  models: StorageSystemModel[] = [];

  /**
   * @generated from field: map<string, string> configuration = 3;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowActivityStorageSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityStorageSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storage_system", kind: "message", T: StorageSystem },
    { no: 2, name: "models", kind: "message", T: StorageSystemModel, repeated: true },
    { no: 3, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityStorageSystem {
    return new WorkflowActivityStorageSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystem {
    return new WorkflowActivityStorageSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystem {
    return new WorkflowActivityStorageSystem().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityStorageSystem | PlainMessage<WorkflowActivityStorageSystem> | undefined, b: WorkflowActivityStorageSystem | PlainMessage<WorkflowActivityStorageSystem> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityStorageSystem, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityModel
 */
export class WorkflowActivityModel extends Message<WorkflowActivityModel> {
  /**
   * @generated from field: bosca.content.Model model = 1;
   */
  model?: Model;

  /**
   * @generated from field: map<string, string> configuration = 2;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowActivityModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Model },
    { no: 2, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityModel {
    return new WorkflowActivityModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityModel {
    return new WorkflowActivityModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityModel {
    return new WorkflowActivityModel().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityModel | PlainMessage<WorkflowActivityModel> | undefined, b: WorkflowActivityModel | PlainMessage<WorkflowActivityModel> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityModel, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityStorageSystems
 */
export class WorkflowActivityStorageSystems extends Message<WorkflowActivityStorageSystems> {
  /**
   * @generated from field: repeated bosca.content.WorkflowActivityStorageSystem systems = 1;
   */
  systems: WorkflowActivityStorageSystem[] = [];

  constructor(data?: PartialMessage<WorkflowActivityStorageSystems>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityStorageSystems";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "systems", kind: "message", T: WorkflowActivityStorageSystem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityStorageSystems {
    return new WorkflowActivityStorageSystems().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystems {
    return new WorkflowActivityStorageSystems().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystems {
    return new WorkflowActivityStorageSystems().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityStorageSystems | PlainMessage<WorkflowActivityStorageSystems> | undefined, b: WorkflowActivityStorageSystems | PlainMessage<WorkflowActivityStorageSystems> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityStorageSystems, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityPrompt
 */
export class WorkflowActivityPrompt extends Message<WorkflowActivityPrompt> {
  /**
   * @generated from field: bosca.content.Prompt prompt = 1;
   */
  prompt?: Prompt;

  /**
   * @generated from field: map<string, string> configuration = 2;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowActivityPrompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityPrompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "message", T: Prompt },
    { no: 2, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityPrompt {
    return new WorkflowActivityPrompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityPrompt {
    return new WorkflowActivityPrompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityPrompt {
    return new WorkflowActivityPrompt().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityPrompt | PlainMessage<WorkflowActivityPrompt> | undefined, b: WorkflowActivityPrompt | PlainMessage<WorkflowActivityPrompt> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityPrompt, a, b);
  }
}

/**
 * @generated from message bosca.content.WorkflowActivityPrompts
 */
export class WorkflowActivityPrompts extends Message<WorkflowActivityPrompts> {
  /**
   * @generated from field: repeated bosca.content.WorkflowActivityPrompt prompts = 1;
   */
  prompts: WorkflowActivityPrompt[] = [];

  constructor(data?: PartialMessage<WorkflowActivityPrompts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.WorkflowActivityPrompts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompts", kind: "message", T: WorkflowActivityPrompt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityPrompts {
    return new WorkflowActivityPrompts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityPrompts {
    return new WorkflowActivityPrompts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityPrompts {
    return new WorkflowActivityPrompts().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityPrompts | PlainMessage<WorkflowActivityPrompts> | undefined, b: WorkflowActivityPrompts | PlainMessage<WorkflowActivityPrompts> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityPrompts, a, b);
  }
}

