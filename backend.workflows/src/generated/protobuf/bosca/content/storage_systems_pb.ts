//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/content/storage_systems.proto (package bosca.content, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Model } from "./model_pb";

/**
 * @generated from enum bosca.content.StorageSystemType
 */
export enum StorageSystemType {
  /**
   * @generated from enum value: unknown_storage_system = 0;
   */
  unknown_storage_system = 0,

  /**
   * @generated from enum value: vector_storage_system = 1;
   */
  vector_storage_system = 1,

  /**
   * @generated from enum value: search_storage_system = 2;
   */
  search_storage_system = 2,

  /**
   * @generated from enum value: metadata_storage_system = 3;
   */
  metadata_storage_system = 3,

  /**
   * @generated from enum value: supplementary_storage_system = 4;
   */
  supplementary_storage_system = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(StorageSystemType)
proto3.util.setEnumType(StorageSystemType, "bosca.content.StorageSystemType", [
  { no: 0, name: "unknown_storage_system" },
  { no: 1, name: "vector_storage_system" },
  { no: 2, name: "search_storage_system" },
  { no: 3, name: "metadata_storage_system" },
  { no: 4, name: "supplementary_storage_system" },
]);

/**
 * @generated from message bosca.content.StorageSystem
 */
export class StorageSystem extends Message<StorageSystem> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bosca.content.StorageSystemType type = 2;
   */
  type = StorageSystemType.unknown_storage_system;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: map<string, string> configuration = 5;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<StorageSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.StorageSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(StorageSystemType) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageSystem {
    return new StorageSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageSystem {
    return new StorageSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageSystem {
    return new StorageSystem().fromJsonString(jsonString, options);
  }

  static equals(a: StorageSystem | PlainMessage<StorageSystem> | undefined, b: StorageSystem | PlainMessage<StorageSystem> | undefined): boolean {
    return proto3.util.equals(StorageSystem, a, b);
  }
}

/**
 * @generated from message bosca.content.StorageSystems
 */
export class StorageSystems extends Message<StorageSystems> {
  /**
   * @generated from field: repeated bosca.content.StorageSystem systems = 1;
   */
  systems: StorageSystem[] = [];

  constructor(data?: PartialMessage<StorageSystems>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.StorageSystems";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "systems", kind: "message", T: StorageSystem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageSystems {
    return new StorageSystems().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageSystems {
    return new StorageSystems().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageSystems {
    return new StorageSystems().fromJsonString(jsonString, options);
  }

  static equals(a: StorageSystems | PlainMessage<StorageSystems> | undefined, b: StorageSystems | PlainMessage<StorageSystems> | undefined): boolean {
    return proto3.util.equals(StorageSystems, a, b);
  }
}

/**
 * @generated from message bosca.content.StorageSystemModel
 */
export class StorageSystemModel extends Message<StorageSystemModel> {
  /**
   * @generated from field: bosca.content.Model model = 2;
   */
  model?: Model;

  /**
   * @generated from field: map<string, string> configuration = 3;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<StorageSystemModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.StorageSystemModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "model", kind: "message", T: Model },
    { no: 3, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageSystemModel {
    return new StorageSystemModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageSystemModel {
    return new StorageSystemModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageSystemModel {
    return new StorageSystemModel().fromJsonString(jsonString, options);
  }

  static equals(a: StorageSystemModel | PlainMessage<StorageSystemModel> | undefined, b: StorageSystemModel | PlainMessage<StorageSystemModel> | undefined): boolean {
    return proto3.util.equals(StorageSystemModel, a, b);
  }
}

/**
 * @generated from message bosca.content.StorageSystemModels
 */
export class StorageSystemModels extends Message<StorageSystemModels> {
  /**
   * @generated from field: repeated bosca.content.StorageSystemModel models = 1;
   */
  models: StorageSystemModel[] = [];

  constructor(data?: PartialMessage<StorageSystemModels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.content.StorageSystemModels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "message", T: StorageSystemModel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageSystemModels {
    return new StorageSystemModels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageSystemModels {
    return new StorageSystemModels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageSystemModels {
    return new StorageSystemModels().fromJsonString(jsonString, options);
  }

  static equals(a: StorageSystemModels | PlainMessage<StorageSystemModels> | undefined, b: StorageSystemModels | PlainMessage<StorageSystemModels> | undefined): boolean {
    return proto3.util.equals(StorageSystemModels, a, b);
  }
}

