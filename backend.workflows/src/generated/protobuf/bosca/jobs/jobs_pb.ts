//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/jobs/jobs.proto (package bosca.jobs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message bosca.jobs.PollRequest
 */
export class PollRequest extends Message<PollRequest> {
  /**
   * @generated from field: string queue = 1;
   */
  queue = "";

  /**
   * @generated from field: int64 timeout = 2;
   */
  timeout = protoInt64.zero;

  constructor(data?: PartialMessage<PollRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.jobs.PollRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PollRequest {
    return new PollRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PollRequest {
    return new PollRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PollRequest {
    return new PollRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PollRequest | PlainMessage<PollRequest> | undefined, b: PollRequest | PlainMessage<PollRequest> | undefined): boolean {
    return proto3.util.equals(PollRequest, a, b);
  }
}

/**
 * @generated from message bosca.jobs.QueueRequest
 */
export class QueueRequest extends Message<QueueRequest> {
  /**
   * @generated from field: string queue = 1;
   */
  queue = "";

  /**
   * @generated from field: bytes json = 2;
   */
  json = new Uint8Array(0);

  constructor(data?: PartialMessage<QueueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.jobs.QueueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "json", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueueRequest {
    return new QueueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueueRequest {
    return new QueueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueueRequest {
    return new QueueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueueRequest | PlainMessage<QueueRequest> | undefined, b: QueueRequest | PlainMessage<QueueRequest> | undefined): boolean {
    return proto3.util.equals(QueueRequest, a, b);
  }
}

/**
 * @generated from message bosca.jobs.FinishRequest
 */
export class FinishRequest extends Message<FinishRequest> {
  /**
   * @generated from field: string queue = 1;
   */
  queue = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<FinishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.jobs.FinishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishRequest {
    return new FinishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishRequest {
    return new FinishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishRequest {
    return new FinishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FinishRequest | PlainMessage<FinishRequest> | undefined, b: FinishRequest | PlainMessage<FinishRequest> | undefined): boolean {
    return proto3.util.equals(FinishRequest, a, b);
  }
}

/**
 * @generated from message bosca.jobs.Job
 */
export class Job extends Message<Job> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bytes json = 2;
   */
  json = new Uint8Array(0);

  constructor(data?: PartialMessage<Job>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.jobs.Job";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "json", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Job {
    return new Job().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJsonString(jsonString, options);
  }

  static equals(a: Job | PlainMessage<Job> | undefined, b: Job | PlainMessage<Job> | undefined): boolean {
    return proto3.util.equals(Job, a, b);
  }
}

/**
 * @generated from message bosca.jobs.QueueResponse
 */
export class QueueResponse extends Message<QueueResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<QueueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.jobs.QueueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueueResponse {
    return new QueueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueueResponse {
    return new QueueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueueResponse {
    return new QueueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueueResponse | PlainMessage<QueueResponse> | undefined, b: QueueResponse | PlainMessage<QueueResponse> | undefined): boolean {
    return proto3.util.equals(QueueResponse, a, b);
  }
}

