//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/requests.proto (package bosca, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message bosca.IntIdRequest
 */
export class IntIdRequest extends Message<IntIdRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<IntIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.IntIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntIdRequest {
    return new IntIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntIdRequest {
    return new IntIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntIdRequest {
    return new IntIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IntIdRequest | PlainMessage<IntIdRequest> | undefined, b: IntIdRequest | PlainMessage<IntIdRequest> | undefined): boolean {
    return proto3.util.equals(IntIdRequest, a, b);
  }
}

/**
 * @generated from message bosca.IdRequest
 */
export class IdRequest extends Message<IdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<IdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.IdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdRequest {
    return new IdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdRequest {
    return new IdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdRequest {
    return new IdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IdRequest | PlainMessage<IdRequest> | undefined, b: IdRequest | PlainMessage<IdRequest> | undefined): boolean {
    return proto3.util.equals(IdRequest, a, b);
  }
}

/**
 * @generated from message bosca.SupplementaryIdRequest
 */
export class SupplementaryIdRequest extends Message<SupplementaryIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<SupplementaryIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.SupplementaryIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupplementaryIdRequest {
    return new SupplementaryIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupplementaryIdRequest {
    return new SupplementaryIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupplementaryIdRequest {
    return new SupplementaryIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SupplementaryIdRequest | PlainMessage<SupplementaryIdRequest> | undefined, b: SupplementaryIdRequest | PlainMessage<SupplementaryIdRequest> | undefined): boolean {
    return proto3.util.equals(SupplementaryIdRequest, a, b);
  }
}

/**
 * @generated from message bosca.IdResponse
 */
export class IdResponse extends Message<IdResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<IdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.IdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdResponse {
    return new IdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdResponse {
    return new IdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdResponse {
    return new IdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IdResponse | PlainMessage<IdResponse> | undefined, b: IdResponse | PlainMessage<IdResponse> | undefined): boolean {
    return proto3.util.equals(IdResponse, a, b);
  }
}

/**
 * @generated from message bosca.IdResponsesId
 */
export class IdResponsesId extends Message<IdResponsesId> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<IdResponsesId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.IdResponsesId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdResponsesId {
    return new IdResponsesId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdResponsesId {
    return new IdResponsesId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdResponsesId {
    return new IdResponsesId().fromJsonString(jsonString, options);
  }

  static equals(a: IdResponsesId | PlainMessage<IdResponsesId> | undefined, b: IdResponsesId | PlainMessage<IdResponsesId> | undefined): boolean {
    return proto3.util.equals(IdResponsesId, a, b);
  }
}

/**
 * @generated from message bosca.IdResponses
 */
export class IdResponses extends Message<IdResponses> {
  /**
   * @generated from field: repeated bosca.IdResponsesId id = 1;
   */
  id: IdResponsesId[] = [];

  constructor(data?: PartialMessage<IdResponses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.IdResponses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: IdResponsesId, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdResponses {
    return new IdResponses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdResponses {
    return new IdResponses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdResponses {
    return new IdResponses().fromJsonString(jsonString, options);
  }

  static equals(a: IdResponses | PlainMessage<IdResponses> | undefined, b: IdResponses | PlainMessage<IdResponses> | undefined): boolean {
    return proto3.util.equals(IdResponses, a, b);
  }
}

/**
 * @generated from message bosca.Url
 */
export class Url extends Message<Url> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<Url>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.Url";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Url {
    return new Url().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Url {
    return new Url().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Url {
    return new Url().fromJsonString(jsonString, options);
  }

  static equals(a: Url | PlainMessage<Url> | undefined, b: Url | PlainMessage<Url> | undefined): boolean {
    return proto3.util.equals(Url, a, b);
  }
}

/**
 * @generated from message bosca.IdsRequest
 */
export class IdsRequest extends Message<IdsRequest> {
  /**
   * @generated from field: repeated string id = 1;
   */
  id: string[] = [];

  constructor(data?: PartialMessage<IdsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.IdsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdsRequest {
    return new IdsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdsRequest {
    return new IdsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdsRequest {
    return new IdsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IdsRequest | PlainMessage<IdsRequest> | undefined, b: IdsRequest | PlainMessage<IdsRequest> | undefined): boolean {
    return proto3.util.equals(IdsRequest, a, b);
  }
}

