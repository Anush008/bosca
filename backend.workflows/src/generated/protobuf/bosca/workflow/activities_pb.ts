//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/workflow/activities.proto (package bosca.workflow, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Prompt } from "./prompts_pb";
import { StorageSystem, StorageSystemModel } from "./storage_systems_pb";
import { Model } from "./models_pb";

/**
 * @generated from enum bosca.workflow.WorkflowActivityParameterType
 */
export enum WorkflowActivityParameterType {
  /**
   * @generated from enum value: unknown_activity_parameter_type = 0;
   */
  unknown_activity_parameter_type = 0,

  /**
   * @generated from enum value: context = 1;
   */
  context = 1,

  /**
   * @generated from enum value: supplementary = 2;
   */
  supplementary = 2,

  /**
   * @generated from enum value: supplementary_array = 3;
   */
  supplementary_array = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkflowActivityParameterType)
proto3.util.setEnumType(WorkflowActivityParameterType, "bosca.workflow.WorkflowActivityParameterType", [
  { no: 0, name: "unknown_activity_parameter_type" },
  { no: 1, name: "context" },
  { no: 2, name: "supplementary" },
  { no: 3, name: "supplementary_array" },
]);

/**
 * @generated from message bosca.workflow.Activity
 */
export class Activity extends Message<Activity> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: optional string child_workflow_id = 4;
   */
  childWorkflowId?: string;

  /**
   * @generated from field: map<string, string> configuration = 5;
   */
  configuration: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, bosca.workflow.WorkflowActivityParameterType> inputs = 6;
   */
  inputs: { [key: string]: WorkflowActivityParameterType } = {};

  /**
   * @generated from field: map<string, bosca.workflow.WorkflowActivityParameterType> outputs = 7;
   */
  outputs: { [key: string]: WorkflowActivityParameterType } = {};

  constructor(data?: PartialMessage<Activity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.Activity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "child_workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(WorkflowActivityParameterType)} },
    { no: 7, name: "outputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(WorkflowActivityParameterType)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Activity {
    return new Activity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Activity {
    return new Activity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Activity {
    return new Activity().fromJsonString(jsonString, options);
  }

  static equals(a: Activity | PlainMessage<Activity> | undefined, b: Activity | PlainMessage<Activity> | undefined): boolean {
    return proto3.util.equals(Activity, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityParameterValue
 */
export class WorkflowActivityParameterValue extends Message<WorkflowActivityParameterValue> {
  /**
   * @generated from oneof bosca.workflow.WorkflowActivityParameterValue.value
   */
  value: {
    /**
     * @generated from field: string single_value = 1;
     */
    value: string;
    case: "singleValue";
  } | {
    /**
     * @generated from field: bosca.workflow.WorkflowActivityParameterValues array_value = 2;
     */
    value: WorkflowActivityParameterValues;
    case: "arrayValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WorkflowActivityParameterValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityParameterValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "single_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "array_value", kind: "message", T: WorkflowActivityParameterValues, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityParameterValue {
    return new WorkflowActivityParameterValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValue {
    return new WorkflowActivityParameterValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValue {
    return new WorkflowActivityParameterValue().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityParameterValue | PlainMessage<WorkflowActivityParameterValue> | undefined, b: WorkflowActivityParameterValue | PlainMessage<WorkflowActivityParameterValue> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityParameterValue, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityParameterValues
 */
export class WorkflowActivityParameterValues extends Message<WorkflowActivityParameterValues> {
  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<WorkflowActivityParameterValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityParameterValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityParameterValues {
    return new WorkflowActivityParameterValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValues {
    return new WorkflowActivityParameterValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityParameterValues {
    return new WorkflowActivityParameterValues().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityParameterValues | PlainMessage<WorkflowActivityParameterValues> | undefined, b: WorkflowActivityParameterValues | PlainMessage<WorkflowActivityParameterValues> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityParameterValues, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityPrompt
 */
export class WorkflowActivityPrompt extends Message<WorkflowActivityPrompt> {
  /**
   * @generated from field: bosca.workflow.Prompt prompt = 1;
   */
  prompt?: Prompt;

  /**
   * @generated from field: map<string, string> configuration = 2;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowActivityPrompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityPrompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "message", T: Prompt },
    { no: 2, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityPrompt {
    return new WorkflowActivityPrompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityPrompt {
    return new WorkflowActivityPrompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityPrompt {
    return new WorkflowActivityPrompt().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityPrompt | PlainMessage<WorkflowActivityPrompt> | undefined, b: WorkflowActivityPrompt | PlainMessage<WorkflowActivityPrompt> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityPrompt, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityPrompts
 */
export class WorkflowActivityPrompts extends Message<WorkflowActivityPrompts> {
  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityPrompt prompts = 1;
   */
  prompts: WorkflowActivityPrompt[] = [];

  constructor(data?: PartialMessage<WorkflowActivityPrompts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityPrompts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompts", kind: "message", T: WorkflowActivityPrompt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityPrompts {
    return new WorkflowActivityPrompts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityPrompts {
    return new WorkflowActivityPrompts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityPrompts {
    return new WorkflowActivityPrompts().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityPrompts | PlainMessage<WorkflowActivityPrompts> | undefined, b: WorkflowActivityPrompts | PlainMessage<WorkflowActivityPrompts> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityPrompts, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityStorageSystem
 */
export class WorkflowActivityStorageSystem extends Message<WorkflowActivityStorageSystem> {
  /**
   * @generated from field: bosca.workflow.StorageSystem storage_system = 1;
   */
  storageSystem?: StorageSystem;

  /**
   * @generated from field: repeated bosca.workflow.StorageSystemModel models = 2;
   */
  models: StorageSystemModel[] = [];

  /**
   * @generated from field: map<string, string> configuration = 3;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowActivityStorageSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityStorageSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storage_system", kind: "message", T: StorageSystem },
    { no: 2, name: "models", kind: "message", T: StorageSystemModel, repeated: true },
    { no: 3, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityStorageSystem {
    return new WorkflowActivityStorageSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystem {
    return new WorkflowActivityStorageSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystem {
    return new WorkflowActivityStorageSystem().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityStorageSystem | PlainMessage<WorkflowActivityStorageSystem> | undefined, b: WorkflowActivityStorageSystem | PlainMessage<WorkflowActivityStorageSystem> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityStorageSystem, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityStorageSystems
 */
export class WorkflowActivityStorageSystems extends Message<WorkflowActivityStorageSystems> {
  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityStorageSystem systems = 1;
   */
  systems: WorkflowActivityStorageSystem[] = [];

  constructor(data?: PartialMessage<WorkflowActivityStorageSystems>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityStorageSystems";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "systems", kind: "message", T: WorkflowActivityStorageSystem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityStorageSystems {
    return new WorkflowActivityStorageSystems().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystems {
    return new WorkflowActivityStorageSystems().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityStorageSystems {
    return new WorkflowActivityStorageSystems().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityStorageSystems | PlainMessage<WorkflowActivityStorageSystems> | undefined, b: WorkflowActivityStorageSystems | PlainMessage<WorkflowActivityStorageSystems> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityStorageSystems, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityModel
 */
export class WorkflowActivityModel extends Message<WorkflowActivityModel> {
  /**
   * @generated from field: bosca.workflow.Model model = 1;
   */
  model?: Model;

  /**
   * @generated from field: map<string, string> configuration = 2;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowActivityModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Model },
    { no: 2, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityModel {
    return new WorkflowActivityModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityModel {
    return new WorkflowActivityModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityModel {
    return new WorkflowActivityModel().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityModel | PlainMessage<WorkflowActivityModel> | undefined, b: WorkflowActivityModel | PlainMessage<WorkflowActivityModel> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityModel, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivity
 */
export class WorkflowActivity extends Message<WorkflowActivity> {
  /**
   * @generated from field: int64 workflow_activity_id = 1;
   */
  workflowActivityId = protoInt64.zero;

  /**
   * @generated from field: string activity_id = 2;
   */
  activityId = "";

  /**
   * @generated from field: optional string child_workflow_id = 3;
   */
  childWorkflowId?: string;

  /**
   * @generated from field: string queue = 4;
   */
  queue = "";

  /**
   * @generated from field: int32 execution_group = 5;
   */
  executionGroup = 0;

  /**
   * @generated from field: map<string, string> configuration = 6;
   */
  configuration: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, bosca.workflow.WorkflowActivityParameterValue> inputs = 7;
   */
  inputs: { [key: string]: WorkflowActivityParameterValue } = {};

  /**
   * @generated from field: map<string, bosca.workflow.WorkflowActivityParameterValue> outputs = 8;
   */
  outputs: { [key: string]: WorkflowActivityParameterValue } = {};

  constructor(data?: PartialMessage<WorkflowActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_activity_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "activity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "child_workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "execution_group", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: WorkflowActivityParameterValue} },
    { no: 8, name: "outputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: WorkflowActivityParameterValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivity {
    return new WorkflowActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivity {
    return new WorkflowActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivity {
    return new WorkflowActivity().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivity | PlainMessage<WorkflowActivity> | undefined, b: WorkflowActivity | PlainMessage<WorkflowActivity> | undefined): boolean {
    return proto3.util.equals(WorkflowActivity, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivities
 */
export class WorkflowActivities extends Message<WorkflowActivities> {
  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivity activities = 1;
   */
  activities: WorkflowActivity[] = [];

  constructor(data?: PartialMessage<WorkflowActivities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "activities", kind: "message", T: WorkflowActivity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivities {
    return new WorkflowActivities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivities {
    return new WorkflowActivities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivities {
    return new WorkflowActivities().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivities | PlainMessage<WorkflowActivities> | undefined, b: WorkflowActivities | PlainMessage<WorkflowActivities> | undefined): boolean {
    return proto3.util.equals(WorkflowActivities, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityIdRequest
 */
export class WorkflowActivityIdRequest extends Message<WorkflowActivityIdRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: string activity_id = 2;
   */
  activityId = "";

  constructor(data?: PartialMessage<WorkflowActivityIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityIdRequest {
    return new WorkflowActivityIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityIdRequest {
    return new WorkflowActivityIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityIdRequest {
    return new WorkflowActivityIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityIdRequest | PlainMessage<WorkflowActivityIdRequest> | undefined, b: WorkflowActivityIdRequest | PlainMessage<WorkflowActivityIdRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityIdRequest, a, b);
  }
}

