//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/workflow/execution_context.proto (package bosca.workflow, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { WorkflowActivity, WorkflowActivityModel, WorkflowActivityPrompt, WorkflowActivityStorageSystem } from "./activities_pb";

/**
 * @generated from message bosca.workflow.WorkflowExecutionRequest
 */
export class WorkflowExecutionRequest extends Message<WorkflowExecutionRequest> {
  /**
   * @generated from field: optional string parent_execution_id = 1;
   */
  parentExecutionId?: string;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: string metadata_id = 3;
   */
  metadataId = "";

  /**
   * @generated from field: bool wait_for_completion = 4;
   */
  waitForCompletion = false;

  /**
   * @generated from field: map<string, string> context = 5;
   */
  context: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "wait_for_completion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionRequest {
    return new WorkflowExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionRequest {
    return new WorkflowExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionRequest {
    return new WorkflowExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowExecutionRequest | PlainMessage<WorkflowExecutionRequest> | undefined, b: WorkflowExecutionRequest | PlainMessage<WorkflowExecutionRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowExecutionRequest, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowExecutionResponse
 */
export class WorkflowExecutionResponse extends Message<WorkflowExecutionResponse> {
  /**
   * @generated from field: string execution_id = 1;
   */
  executionId = "";

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  /**
   * @generated from field: bool complete = 3;
   */
  complete = false;

  /**
   * @generated from field: optional string error = 4;
   */
  error?: string;

  /**
   * @generated from field: map<string, string> context = 5;
   */
  context: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowExecutionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowExecutionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "complete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionResponse {
    return new WorkflowExecutionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionResponse {
    return new WorkflowExecutionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionResponse {
    return new WorkflowExecutionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowExecutionResponse | PlainMessage<WorkflowExecutionResponse> | undefined, b: WorkflowExecutionResponse | PlainMessage<WorkflowExecutionResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowExecutionResponse, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowExecutionContext
 */
export class WorkflowExecutionContext extends Message<WorkflowExecutionContext> {
  /**
   * @generated from field: optional string parent_execution_id = 1;
   */
  parentExecutionId?: string;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: string execution_id = 3;
   */
  executionId = "";

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivity activities = 4;
   */
  activities: WorkflowActivity[] = [];

  /**
   * @generated from field: int32 current_execution_group = 5;
   */
  currentExecutionGroup = 0;

  /**
   * @generated from field: string metadata_id = 6;
   */
  metadataId = "";

  /**
   * @generated from field: map<string, string> context = 7;
   */
  context: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowExecutionContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowExecutionContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "activities", kind: "message", T: WorkflowActivity, repeated: true },
    { no: 5, name: "current_execution_group", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionContext {
    return new WorkflowExecutionContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionContext {
    return new WorkflowExecutionContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionContext {
    return new WorkflowExecutionContext().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowExecutionContext | PlainMessage<WorkflowExecutionContext> | undefined, b: WorkflowExecutionContext | PlainMessage<WorkflowExecutionContext> | undefined): boolean {
    return proto3.util.equals(WorkflowExecutionContext, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityJob
 */
export class WorkflowActivityJob extends Message<WorkflowActivityJob> {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  /**
   * @generated from field: string execution_id = 2;
   */
  executionId = "";

  /**
   * @generated from field: string workflow_id = 3;
   */
  workflowId = "";

  /**
   * @generated from field: string metadata_id = 4;
   */
  metadataId = "";

  /**
   * @generated from field: bosca.workflow.WorkflowActivity activity = 5;
   */
  activity?: WorkflowActivity;

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityPrompt prompts = 6;
   */
  prompts: WorkflowActivityPrompt[] = [];

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityStorageSystem storage_systems = 7;
   */
  storageSystems: WorkflowActivityStorageSystem[] = [];

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityModel models = 8;
   */
  models: WorkflowActivityModel[] = [];

  /**
   * @generated from field: map<string, string> context = 9;
   */
  context: { [key: string]: string } = {};

  /**
   * @generated from field: bool complete = 10;
   */
  complete = false;

  /**
   * @generated from field: bool success = 11;
   */
  success = false;

  /**
   * @generated from field: optional string error = 12;
   */
  error?: string;

  constructor(data?: PartialMessage<WorkflowActivityJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "activity", kind: "message", T: WorkflowActivity },
    { no: 6, name: "prompts", kind: "message", T: WorkflowActivityPrompt, repeated: true },
    { no: 7, name: "storage_systems", kind: "message", T: WorkflowActivityStorageSystem, repeated: true },
    { no: 8, name: "models", kind: "message", T: WorkflowActivityModel, repeated: true },
    { no: 9, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "complete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityJob {
    return new WorkflowActivityJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityJob {
    return new WorkflowActivityJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityJob {
    return new WorkflowActivityJob().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityJob | PlainMessage<WorkflowActivityJob> | undefined, b: WorkflowActivityJob | PlainMessage<WorkflowActivityJob> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityJob, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityJobRequest
 */
export class WorkflowActivityJobRequest extends Message<WorkflowActivityJobRequest> {
  /**
   * @generated from field: string queue = 1;
   */
  queue = "";

  /**
   * @generated from field: repeated string activity_id = 2;
   */
  activityId: string[] = [];

  constructor(data?: PartialMessage<WorkflowActivityJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityJobRequest {
    return new WorkflowActivityJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityJobRequest {
    return new WorkflowActivityJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityJobRequest {
    return new WorkflowActivityJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityJobRequest | PlainMessage<WorkflowActivityJobRequest> | undefined, b: WorkflowActivityJobRequest | PlainMessage<WorkflowActivityJobRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityJobRequest, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowActivityJobStatus
 */
export class WorkflowActivityJobStatus extends Message<WorkflowActivityJobStatus> {
  /**
   * @generated from field: string execution_id = 1;
   */
  executionId = "";

  /**
   * @generated from field: string job_id = 2;
   */
  jobId = "";

  /**
   * @generated from field: int64 workflow_activity_id = 3;
   */
  workflowActivityId = protoInt64.zero;

  /**
   * @generated from field: bool complete = 4;
   */
  complete = false;

  /**
   * @generated from field: bool success = 5;
   */
  success = false;

  /**
   * @generated from field: optional string error = 6;
   */
  error?: string;

  constructor(data?: PartialMessage<WorkflowActivityJobStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowActivityJobStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_activity_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "complete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowActivityJobStatus {
    return new WorkflowActivityJobStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowActivityJobStatus {
    return new WorkflowActivityJobStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowActivityJobStatus {
    return new WorkflowActivityJobStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowActivityJobStatus | PlainMessage<WorkflowActivityJobStatus> | undefined, b: WorkflowActivityJobStatus | PlainMessage<WorkflowActivityJobStatus> | undefined): boolean {
    return proto3.util.equals(WorkflowActivityJobStatus, a, b);
  }
}

