x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2024-04-06T05-26-02Z
  command: server --console-address ":9011" http://minio{1...4}/data{1...2}
  restart: always
  expose:
    - "9010"
    - "9011"
  healthcheck:
    test: [ "CMD", "mc", "ready", "local" ]
    interval: 5s
    timeout: 5s
    retries: 5
  environment:
    - MINIO_ACCESS_KEY=67fO5gFs6BuksBrh6rMp
    - MINIO_SECRET_KEY=eV4rlwomvXsM19CXorOTb5uYaFLeNXsPLKx5Uxdm
  networks:
    - net1

services:
  mailhog:
    image: mailhog/mailhog:latest
    platform: linux/amd64
    restart: always
    ports:
      - 1025:1025
      - 8025:8025

  qdrant:
    image: qdrant/qdrant:v1.9.2
    restart: always
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - ./qdrant:/qdrant/storage:z
    networks:
      - net1

  meilisearch:
    image: getmeili/meilisearch:v1.7
    restart: always
    ports:
      - 7700:7700
    environment:
      MEILI_MASTER_KEY: p8JcB_HuMHRxN7uVXfrG2wU06b5k7oTvaAAYo6nsi9M
    volumes:
      - ./meilisearch/meili_data:/meili_data
    networks:
      - net1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7700/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16-alpine
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=bosca
      - POSTGRES_USER=bosca
      - POSTGRES_DB=bosca
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "bosca" ]
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      - net1

  hydra-migrate:
    image: oryd/hydra:v2.2.0
    command:
      - migrate
      - sql
      - --yes
      - "postgres://bosca:bosca@postgres:5432/hydra?sslmode=disable"
    environment:
      SECRETS_SYSTEM: J6HsjnqeGHqVai7GVlFbKQi6Je189fMF
      DSN: "postgres://bosca:bosca@postgres:5432/hydra?sslmode=disable"
    networks:
      - net1
    depends_on:
      postgres:
        condition: service_healthy

  kratos-migrate:
    image: oryd/kratos:v1.1.0
    command:
      - migrate
      - sql
      - --yes
      - "postgres://bosca:bosca@postgres:5432/kratos?sslmode=disable"
    environment:
      SECRETS_SYSTEM: J6HsjnqeGHqVai7GVlFbKQi6Je189fMF
      DSN: "postgres://bosca:bosca@postgres:5432/kratos?sslmode=disable"
    networks:
      - net1
    depends_on:
      postgres:
        condition: service_healthy

  hydra:
    image: oryd/hydra:v2.2.0
    restart: always
    command:
      - serve
      - all
      - --config
      - /etc/hydra/config/hydra.yaml
    ports:
      - '4444:4444'
      - '4445:4445'
    volumes:
      - ./hydra:/etc/hydra/config
    environment:
      SECRETS_SYSTEM: J6HsjnqeGHqVai7GVlFbKQi6Je189fMF
      DSN: "postgres://bosca:bosca@postgres:5432/hydra?sslmode=disable"
    networks:
      - net1
    depends_on:
      hydra-migrate:
        condition: service_completed_successfully

  kratos:
    image: oryd/kratos:v1.1.0
    restart: always
    command:
      - serve
      - all
      - --config
      - /etc/kratos/config/kratos.yaml
    ports:
      - '4433:4433'
      - '4434:4434'
    volumes:
      - ./kratos:/etc/kratos/config
    environment:
      SECRETS_SYSTEM: J6HsjnqeGHqVai7GVlFbKQi6Je189fMF
      COURIER_SMTP_CONNECTION_URI: "smtp://mailhog:1025"
      DSN: "postgres://bosca:bosca@postgres:5432/kratos?sslmode=disable"
    healthcheck:
      test: [ "CMD", "wget", "-O/dev/null", "-q", "--spider", "http://localhost:4434/health/alive" ]
      interval: 3s
      timeout: 10s
      retries: 3
    networks:
      - net1
    depends_on:
      kratos-migrate:
        condition: service_completed_successfully

  spicedb:
    image: authzed/spicedb:v1.33.0
    command: "serve"
    restart: "always"
    ports:
      - "8080:8080"
      - "9093:9090"
      - "50051:50051"
    environment:
      - "SPICEDB_GRPC_PRESHARED_KEY=bosca-spicedb"
      - "SPICEDB_DATASTORE_ENGINE=postgres"
      - "SPICEDB_DATASTORE_CONN_URI=postgres://bosca:bosca@postgres:5432/spicedb?sslmode=disable"
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=:50051"]
      interval: 3s
      timeout: 30s
      retries: 3
    depends_on:
      spicedb-migrate:
        condition: service_completed_successfully
    networks:
      - net1

  spicedb-init:
    build:
      dockerfile: spicedb/Dockerfile-init
    restart: on-failure:100000
    environment:
      SECRETS_SYSTEM: J6HsjnqeGHqVai7GVlFbKQi6Je189fMF
      KRATOS_ADMIN_URL: "http://kratos:4434"
    depends_on:
      spicedb:
        condition: service_healthy
      kratos:
        condition: service_healthy
    networks:
      - net1

  spicedb-migrate:
    image: authzed/spicedb:v1.33.0
    command: "migrate head"
    restart: "on-failure"
    environment:
      - "SPICEDB_DATASTORE_ENGINE=postgres"
      - "SPICEDB_DATASTORE_CONN_URI=postgres://bosca:bosca@postgres:5432/spicedb?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - net1

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - minio-data1-1:/data1
      - minio-data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - minio-data2-1:/data1
      - minio-data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - minio-data3-1:/data1
      - minio-data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - minio-data4-1:/data1
      - minio-data4-2:/data2

  minio-nginx:
    image: nginx:1.19.2-alpine
    restart: always
    hostname: nginx
    volumes:
      - ./minio/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9010:9010"
      - "9011:9011"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9010/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - net1

  storage-init:
    build:
      dockerfile: Dockerfile-storage
    restart: on-failure:100000
    depends_on:
      minio-nginx:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    networks:
      - net1

#  spark:
#    image: docker.io/bitnami/spark:3.5
#    environment:
#      - SPARK_MODE=master
#      - SPARK_RPC_AUTHENTICATION_ENABLED=no
#      - SPARK_RPC_ENCRYPTION_ENABLED=no
#      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#      - SPARK_SSL_ENABLED=no
#      - SPARK_USER=spark
#    ports:
#      - '9080:8080'
#      - '7077:7077'
#    networks:
#      - net1

#  spark-worker:
#    image: docker.io/bitnami/spark:3.5
#    environment:
#      - SPARK_MODE=worker
#      - SPARK_MASTER_URL=spark://spark:7077
#      - SPARK_WORKER_MEMORY=1G
#      - SPARK_WORKER_CORES=1
#      - SPARK_RPC_AUTHENTICATION_ENABLED=no
#      - SPARK_RPC_ENCRYPTION_ENABLED=no
#      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#      - SPARK_SSL_ENABLED=no
#      - SPARK_USER=spark
#    ports:
#      - '9081:8081'
#    networks:
#      - net1

  temporal-admin-tools:
    container_name: temporal-admin-tools
    restart: always
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.23.1
    networks:
      - net1
    stdin_open: true
    tty: true

  temporal-ui:
    container_name: temporal-ui
    restart: always
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:2.26.2
    networks:
      - net1
    ports:
      - 8085:8080

  temporal:
    image: temporalio/auto-setup:1.23.1
    restart: always
    environment:
      - DB=postgres
      - DB_PORT=5432
      - POSTGRES_USER=bosca
      - POSTGRES_PWD=bosca
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    networks:
      - net1
    ports:
      - 7233:7233
    volumes:
      - ./temporal:/etc/temporal/config/dynamicconfig
    healthcheck:
      test: ['CMD-SHELL', 'tctl --address temporal:7233 workflow list']
      interval: 1s
      timeout: 5s
      start_period: 2s
    depends_on:
      postgres:
        condition: service_healthy

#  mlflow:
#    restart: always
#    platform: linux/amd64
#    image: ghcr.io/mlflow/mlflow:v2.0.1
#    depends_on:
#      postgres:
#        condition: service_healthy
#    ports:
#      - "5001:5000"
#    networks:
#      - net1
#    environment:
#      - AWS_ACCESS_KEY_ID=67fO5gFs6BuksBrh6rMp
#      - AWS_SECRET_ACCESS_KEY=eV4rlwomvXsM19CXorOTb5uYaFLeNXsPLKx5Uxdm
#      - MLFLOW_S3_ENDPOINT_URL=http://minio-nginx:9010
#      - MLFLOW_S3_IGNORE_TLS=true
#    command:
#      - bash
#      - -c
#      - "python3 -m pip install pip --upgrade && \ python3 -m pip install psycopg2-binary && \ mlflow server --backend.core-store-uri postgresql://bosca:bosca@postgres:5432/mlflow --host 0.0.0.0 --serve-artifacts --artifacts-destination s3://mlflow"
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:5000/" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3

  ollama:
    image: ollama/ollama:latest
    ports:
      - 11434:11434
    volumes:
      - ./ollama/ollama:/root/.ollama
    tty: true
    restart: always
    networks:
      - net1
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [gpu]

  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: always
    ports:
      - 8086:8080
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
    networks:
      - net1

  textextractor:
    image: ghcr.io/sowers-io/bosca/text-extractor:a35bff0b7cf9d7584f3d58269f9719a7d5778d02
    restart: always
    ports:
      - 8083:8080
    environment:
      QUARKUS_MANAGEMENT_LIMITS_MAX_BODY_SIZE: 100G
    networks:
      - net1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  net1:

volumes:
  postgres:
  postgresjobqueue:
  minio-data1-1:
  minio-data1-2:
  minio-data2-1:
  minio-data2-2:
  minio-data3-1:
  minio-data3-2:
  minio-data4-1:
  minio-data4-2: