//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: bosca/workflow/queue_service.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WorkflowQueueService_Enqueue_FullMethodName = "/bosca.workflow.WorkflowQueueService/Enqueue"
)

// WorkflowQueueServiceClient is the client API for WorkflowQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowQueueServiceClient interface {
	Enqueue(ctx context.Context, in *WorkflowEnqueueRequest, opts ...grpc.CallOption) (*WorkflowEnqueueResponse, error)
}

type workflowQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowQueueServiceClient(cc grpc.ClientConnInterface) WorkflowQueueServiceClient {
	return &workflowQueueServiceClient{cc}
}

func (c *workflowQueueServiceClient) Enqueue(ctx context.Context, in *WorkflowEnqueueRequest, opts ...grpc.CallOption) (*WorkflowEnqueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowEnqueueResponse)
	err := c.cc.Invoke(ctx, WorkflowQueueService_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowQueueServiceServer is the server API for WorkflowQueueService service.
// All implementations must embed UnimplementedWorkflowQueueServiceServer
// for forward compatibility
type WorkflowQueueServiceServer interface {
	Enqueue(context.Context, *WorkflowEnqueueRequest) (*WorkflowEnqueueResponse, error)
	mustEmbedUnimplementedWorkflowQueueServiceServer()
}

// UnimplementedWorkflowQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowQueueServiceServer struct {
}

func (UnimplementedWorkflowQueueServiceServer) Enqueue(context.Context, *WorkflowEnqueueRequest) (*WorkflowEnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedWorkflowQueueServiceServer) mustEmbedUnimplementedWorkflowQueueServiceServer() {}

// UnsafeWorkflowQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowQueueServiceServer will
// result in compilation errors.
type UnsafeWorkflowQueueServiceServer interface {
	mustEmbedUnimplementedWorkflowQueueServiceServer()
}

func RegisterWorkflowQueueServiceServer(s grpc.ServiceRegistrar, srv WorkflowQueueServiceServer) {
	s.RegisterService(&WorkflowQueueService_ServiceDesc, srv)
}

func _WorkflowQueueService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowEnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowQueueServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowQueueService_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowQueueServiceServer).Enqueue(ctx, req.(*WorkflowEnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowQueueService_ServiceDesc is the grpc.ServiceDesc for WorkflowQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosca.workflow.WorkflowQueueService",
	HandlerType: (*WorkflowQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _WorkflowQueueService_Enqueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosca/workflow/queue_service.proto",
}
