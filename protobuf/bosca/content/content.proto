/*
 * Copyright 2024 Sowers, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option go_package = "bosca.io/api/protobuf/bosca/content";

import "google/api/annotations.proto";
import "bosca/content/collections.proto";
import "bosca/content/metadata.proto";
import "bosca/content/model.proto";
import "bosca/content/workflows.proto";
import "bosca/content/storage_systems.proto";
import "bosca/content/traits.proto";
import "bosca/content/permissions.proto";
import "bosca/content/url.proto";
import "bosca/empty.proto";
import "bosca/requests.proto";

package bosca.content;

service ContentService {
  rpc GetWorkflowById(bosca.IdRequest) returns (Workflow) {
    option (google.api.http) = {
      get: "/v1/content/workflows/{id}"
    };
  }

  rpc GetWorkflows(bosca.Empty) returns (Workflows) {
    option (google.api.http) = {
      get: "/v1/content/workflows"
    };
  }

  rpc GetModels(bosca.Empty) returns (Models) {
    option (google.api.http) = {
      get: "/v1/content/models"
    };
  }

  rpc GetStorageSystems(bosca.Empty) returns (StorageSystems) {
    option (google.api.http) = {
      get: "/v1/content/storagesystems"
    };
  }

  rpc GetStorageSystem(bosca.IdRequest) returns (StorageSystem) {
    option (google.api.http) = {
      get: "/v1/content/storagesystems/{id}"
    };
  }

  rpc GetStorageSystemModels(bosca.IdRequest) returns (StorageSystemModels) {
    option (google.api.http) = {
      get: "/v1/content/storagesystems/{id}/models"
    };
  }

  rpc GetWorkflowStateById(bosca.IdRequest) returns (WorkflowState) {
    option (google.api.http) = {
      get: "/v1/content/workflowstates/{id}"
    };
  }

  rpc GetWorkflowStates(bosca.Empty) returns (WorkflowStates) {
    option (google.api.http) = {
      get: "/v1/content/workflowstates"
    };
  }

  rpc GetTraitById(bosca.IdRequest) returns (Trait) {
    option (google.api.http) = {
      get: "/v1/content/traits/{id}"
    };
  }

  rpc GetTraits(bosca.Empty) returns (Traits) {
    option (google.api.http) = {
      get: "/v1/content/traits"
    };
  }

  rpc GetTraitWorkflowStorageSystems(TraitWorkflowStorageSystemRequest) returns (StorageSystems) {
    option (google.api.http) = {
      get: "/v1/content/traits/{trait_id}/workflow/{workflow_id}/storagesystems"
    };
  }

  rpc GetRootCollectionItems(bosca.Empty) returns (CollectionItems) {
    option (google.api.http) = {
      get: "/v1/content/collections"
    };
  }

  rpc GetCollectionItems(bosca.IdRequest) returns (CollectionItems) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}/items"
    };
  }

  rpc AddCollection(AddCollectionRequest) returns (bosca.IdResponse) {
    option (google.api.http) = {
      post: "/v1/content/collections"
      body: "*"
    };
  }

  rpc GetCollection(IdRequest) returns (Collection) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}"
    };
  }

  rpc DeleteCollection(bosca.IdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/collections/{id}"
    };
  }

  rpc GetCollectionPermissions(bosca.IdRequest) returns (Permissions) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}/permissions"
    };
  }

  rpc AddCollectionPermission(Permission) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/collections/{id}/permissions"
      body: "*"
    };
  }

  rpc CheckPermission(PermissionCheckRequest) returns (PermissionCheckResponse) {
    option (google.api.http) = {
      get: "/v1/content/permission/check"
    };
  }

  rpc GetMetadata(bosca.IdRequest) returns (Metadata) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}"
    };
  }

  rpc GetMetadatas(bosca.IdsRequest) returns (Metadatas) {
    option (google.api.http) = {
      get: "/v1/content/metadata"
    };
  }

  rpc AddMetadata(AddMetadataRequest) returns (IdResponse) {
    option (google.api.http) = {
      post: "/v1/content/metadata"
      body: "*"
    };
  }

  rpc AddMetadataTrait(AddMetadataTraitRequest) returns (Metadata) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{metadata_id}/traits/{trait_id}"
    };
  }

  rpc DeleteMetadata(bosca.IdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/metadata/{id}"
    };
  }

  rpc GetMetadataUploadUrl(bosca.IdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/url"
    };
  }

  rpc GetMetadataDownloadUrl(bosca.IdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/url"
    };
  }

  rpc AddMetadataSupplementary(AddSupplementaryRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/url/supplementary/{type}/upload"
    };
  }

  rpc GetMetadataSupplementaryDownloadUrl(SupplementaryIdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/url/supplementary/{type}/download"
    };
  }

  rpc DeleteMetadataSupplementary(SupplementaryIdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/metadata/{id}/url/supplementary/{type}"
    };
  }

  rpc SetMetadataUploaded(bosca.IdRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/uploaded"
    };
  }

  rpc GetMetadataPermissions(bosca.IdRequest) returns (Permissions) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/permissions"
    };
  }

  rpc AddMetadataPermissions(Permissions) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/permissions"
      body: "*"
    };
  }

  rpc AddMetadataPermission(Permission) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/permission"
      body: "*"
    };
  }

  rpc BeginTransitionWorkflow (TransitionWorkflowRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{metadata_id}/workflow/{state_id}"
      body: "*"
    };
  }

  rpc CompleteTransitionWorkflow (CompleteTransitionWorkflowRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{metadata_id}/workflow/transition/complete"
      body: "*"
    };
  }

  rpc AddMetadataRelationship(AddMetadataRelationshipRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{metadata_id1}/relationship/{metadata_id2}"
      body: "*"
    };
  }
}

