/*
 * Copyright 2024 Sowers, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option go_package = "bosca.io/api/protobuf/bosca/content";

import "bosca/content/metadata.proto";
import "bosca/content/prompts.proto";
import "bosca/content/storage_systems.proto";

package bosca.content;

message Workflows {
  repeated Workflow workflows = 1;
}

enum WorkflowActivityParameterType {
  unknown_activity_parameter_type = 0;
  context = 1;
  supplementary = 2;
  supplementary_array = 3;
}

message WorkflowActivity {
  string id = 1;
  string name = 2;
  string description = 3;
  bool child_workflow = 4;
  optional string child_workflow_queue = 5;
  map<string, string> configuration = 6;
  map<string, WorkflowActivityParameterType> inputs = 7;
  map<string, WorkflowActivityParameterType> outputs = 8;
}

message Workflow {
  string id = 1;
  string name = 2;
  string description = 3;
  string queue = 4;
  map<string, string> configuration = 5;
}

message WorkflowStates {
  repeated WorkflowState states = 1;
}

enum WorkflowStateType {
  unknown_workflow_type = 0;
  processing = 1;
  draft = 2;
  pending = 3;
  approval = 4;
  approved = 5;
  published = 6;
  failure = 7;
}

message WorkflowState {
  string id = 1;
  string name = 2;
  string description = 3;
  WorkflowStateType type = 4;
  map<string, string> configuration = 5;
  optional string workflow_id = 6;
  optional string entry_workflow_id = 7;
  optional string exit_workflow_id = 8;
}

message WorkflowStateTransitions {
  repeated WorkflowStateTransition transitions = 1;
}

message WorkflowStateTransition {
  string from_state_id = 1;
  string to_state_id = 2;
  string description = 3;
}

message TransitionWorkflowRequest {
  string metadata_id = 1;
  string state_id = 2;
  string status = 3;
  bool retry = 4;
}

message CompleteTransitionWorkflowRequest {
  string metadata_id = 1;
  string status = 2;
  bool success = 3;
}

message WorkflowActivityParameterValue {
  oneof value {
    string single_value = 1;
    WorkflowActivityParameterValues array_value = 2;
  }
}
message WorkflowActivityParameterValues {
  repeated string values = 2;
}

message WorkflowActivityInstance {
  string id = 1;
  bool child_workflow = 2;
  optional string child_workflow_queue = 3;
  int32 execution_group = 4;
  map<string, string> configuration = 5;
  map<string, WorkflowActivityParameterValue> inputs = 7;
  map<string, WorkflowActivityParameterValue> outputs = 8;
}

message WorkflowInstance {
  string trait_id = 1;
  Workflow workflow = 2;
  repeated WorkflowActivityInstance activities = 3;
  string queue = 4;
  Metadata metadata = 5;
  map<string, string> context = 6;
}

message WorkflowActivityExecutionContext {
  WorkflowInstance workflow = 1;
  WorkflowActivityInstance activity = 2;
  Metadata metadata = 3;
  map<string, WorkflowActivityParameterValue> context = 4;
  /* inputs from previous activity */
  map<string, WorkflowActivityParameterValue> inputs = 5;
}

message WorkflowActivityStorageSystem {
  StorageSystem storage_system = 1;
  map<string, string> configuration = 2;
}

message WorkflowActivityStorageSystems {
  repeated WorkflowActivityStorageSystem systems = 1;
}

message WorkflowActivityPrompt {
  Prompt prompt = 1;
  map<string, string> configuration = 2;
}

message WorkflowActivityPrompts {
  WorkflowActivityPrompt prompts = 1;
}