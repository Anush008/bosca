/*
 * Copyright 2024 Sowers, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option go_package = "bosca.io/api/protobuf/content";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "content/metadata.proto";
import "empty.proto";
import "requests.proto";

package bosca.content;

service ContentService {
  rpc GetWorkflowById(bosca.IdRequest) returns (Workflow) {
    option (google.api.http) = {
      get: "/v1/content/workflows/{id}"
    };
  }

  rpc GetWorkflows(bosca.Empty) returns (Workflows) {
    option (google.api.http) = {
      get: "/v1/content/workflows"
    };
  }

  rpc GetWorkflowStateById(bosca.IdRequest) returns (WorkflowState) {
    option (google.api.http) = {
      get: "/v1/content/workflowstates/{id}"
    };
  }

  rpc GetWorkflowStates(bosca.Empty) returns (WorkflowStates) {
    option (google.api.http) = {
      get: "/v1/content/workflowstates"
    };
  }

  rpc GetTraitById(bosca.IdRequest) returns (Trait) {
    option (google.api.http) = {
      get: "/v1/content/traits/{id}"
    };
  }

  rpc GetTraits(bosca.Empty) returns (Traits) {
    option (google.api.http) = {
      get: "/v1/content/traits"
    };
  }

  rpc GetRootCollectionItems(bosca.Empty) returns (CollectionItems) {
    option (google.api.http) = {
      get: "/v1/content/collections"
    };
  }

  rpc GetCollectionItems(bosca.IdRequest) returns (CollectionItems) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}/items"
    };
  }

  rpc AddCollection(AddCollectionRequest) returns (bosca.IdResponse) {
    option (google.api.http) = {
      post: "/v1/content/collections"
      body: "*"
    };
  }

  rpc GetCollection(IdRequest) returns (Collection) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}"
    };
  }

  rpc DeleteCollection(bosca.IdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/collections/{id}"
    };
  }

  rpc GetCollectionPermissions(bosca.IdRequest) returns (Permissions) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}/permissions"
    };
  }

  rpc AddCollectionPermission(Permission) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/collections/{id}/permissions"
      body: "*"
    };
  }

  rpc CheckPermission(PermissionCheckRequest) returns (PermissionCheckResponse) {
    option (google.api.http) = {
      get: "/v1/content/permission/check"
    };
  }

  rpc GetMetadata(bosca.IdRequest) returns (Metadata) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}"
    };
  }

  rpc GetMetadatas(bosca.IdsRequest) returns (Metadatas) {
    option (google.api.http) = {
      get: "/v1/content/metadata"
    };
  }

  rpc AddMetadata(AddMetadataRequest) returns (IdResponse) {
    option (google.api.http) = {
      post: "/v1/content/metadata"
      body: "*"
    };
  }

  rpc DeleteMetadata(bosca.IdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/metadata/{id}"
    };
  }

  rpc GetMetadataUploadUrl(bosca.IdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/url"
    };
  }

  rpc GetMetadataDownloadUrl(bosca.IdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/url"
    };
  }

  rpc AddMetadataSupplementary(AddSupplementaryRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/url/supplementary/{type}/upload"
    };
  }

  rpc GetMetadataSupplementaryDownloadUrl(SupplementaryIdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/url/supplementary/{type}/download"
    };
  }

  rpc DeleteMetadataSupplementary(SupplementaryIdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/metadata/{id}/url/supplementary/{type}"
    };
  }

  rpc SetMetadataUploaded(bosca.IdRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/uploaded"
    };
  }

  rpc GetMetadataPermissions(bosca.IdRequest) returns (Permissions) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/permissions"
    };
  }

  rpc AddMetadataPermissions(Permissions) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/permissions"
      body: "*"
    };
  }

  rpc AddMetadataPermission(Permission) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/permission"
      body: "*"
    };
  }

  rpc TransitionWorkflow (TransitionWorkflowRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{metadata_id}/workflow/{state_id}"
      body: "*"
    };
  }

  rpc AddMetadataRelationship(AddMetadataRelationshipRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{metadata_id1}/relationship/{metadata_id2}"
      body: "*"
    };
  }
}

enum PermissionRelation {
  viewers = 0;
  discoverers = 1;
  editors = 2;
  managers = 3;
  serviceaccounts = 4;
  owners = 5;
}

enum PermissionAction {
  view = 0;
  list = 2;
  edit = 3;
  manage = 4;
  service = 5;
  delete = 6;
}

message TransitionWorkflowRequest {
  string metadata_id = 1;
  string state_id = 2;
  string status = 3;
}

message AddMetadataRelationshipRequest {
  string metadata_id1 = 1;
  string metadata_id2 = 2;
  string relationship = 3;
}

message AddSupplementaryRequest {
  string id = 1;
  string type = 2;
  string name = 3;
  string content_type = 4;
  int64 content_length = 5;
}

message SupplementaryIdRequest {
  string id = 1;
  string type = 2;
}

message PermissionCheckRequest {
  string object = 1;
  PermissionObjectType object_type = 2;
  string subject = 3;
  PermissionSubjectType subject_type = 4;
  PermissionAction action = 5;
}

message PermissionCheckResponse {
  bool allowed = 1;
}

message Permissions {
  string id = 1;
  repeated Permission permissions = 2;
}

enum PermissionObjectType {
  unknown_object_type = 0;
  collection_type = 1;
  metadata_type = 2;
  system_resource_type = 3;
}

enum PermissionSubjectType {
  unknown_subject_type = 0;
  user = 1;
  group = 2;
  service_account = 3;
}

message Permission {
  string id = 1;
  string subject = 2;
  PermissionSubjectType subject_type = 3;
  PermissionRelation relation = 5;
}

enum ItemType {
  unknown = 0;
  collection = 1;
  metadata = 2;
  metadata_variant = 3;
}

message Item {
  string id = 2;
  string name = 3;

  repeated string category_ids = 12;
  repeated string tags = 13;
  map<string, string> attributes = 14;

  google.protobuf.Timestamp created = 20;
  google.protobuf.Timestamp modified = 21;
}

enum CollectionType {
  standard = 0;
  folder = 1;
  root = 2;
}

message AddCollectionRequest {
  string parent = 1;
  Collection collection = 2;
}

message Workflows {
  repeated Workflow workflows = 1;
}

message Workflow {
  string id = 1;
  string name = 2;
  string description = 3;
  string queue = 4;
  map<string, string> configuration = 5;
}

message WorkflowStates {
  repeated WorkflowState states = 1;
}

enum WorkflowStateType {
  unknown_workflow_type = 0;
  processing = 1;
  draft = 2;
  pending = 3;
  approval = 4;
  approved = 5;
  published = 6;
  failure = 7;
}

message WorkflowState {
  string id = 1;
  string name = 2;
  string description = 3;
  WorkflowStateType type = 4;
  map<string, string> configuration = 5;
  optional string workflow_id = 6;
  optional string entry_workflow_id = 7;
  optional string exit_workflow_id = 8;
}

message WorkflowStateTransitions {
  repeated WorkflowStateTransition transitions = 1;
}

message WorkflowStateTransition {
  string from_state_id = 1;
  string to_state_id = 2;
  string description = 3;
}

message Traits {
  repeated Trait traits = 1;
}

message Trait {
  string id = 1;
  string name = 2;
  string workflow_id = 3;
}

message Collection {
  string id = 2;
  string name = 3;

  CollectionType type = 5;

  repeated string category_ids = 12;
  repeated string tags = 13;
  map<string, string> attributes = 14;

  google.protobuf.Timestamp created = 20;
  google.protobuf.Timestamp modified = 21;
}

message CollectionItems {
  repeated CollectionItem items = 1;
}

message CollectionItem {
  oneof Item {
    Metadata metadata = 1;
    Collection collection = 3;
  }
}

message SignedUrlHeader {
  string name = 1;
  string value = 2;
}

message SignedUrl {
  string id = 1;
  string url = 2;
  string method = 3;
  repeated SignedUrlHeader headers = 4;
  map<string, string> attributes = 5;
}

message AddMetadataRequest {
  string collection = 1;
  Metadata metadata = 2;
}

message Metadatas {
  repeated Metadata metadata = 1;
}