/*
 * Copyright 2024 Sowers, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option go_package = "bosca.io/api/protobuf/content";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "empty.proto";
import "requests.proto";

package bosca.content;

service ContentService {
  rpc GetRootCollectionItems(bosca.Empty) returns (CollectionItems) {
    option (google.api.http) = {
      get: "/v1/content/collections"
    };
  }

  rpc GetCollectionItems(bosca.IdRequest) returns (CollectionItems) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}"
    };
  }

  rpc AddCollection(AddCollectionRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/collections"
      body: "*"
    };
  }

  rpc GetCollectionPermissions(bosca.IdRequest) returns (Permissions) {
    option (google.api.http) = {
      get: "/v1/content/collections/{id}/permissions"
    };
  }

  rpc AddCollectionPermission(Permission) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/collections/{id}/permissions"
      body: "*"
    };
  }

  rpc GetMetadata(bosca.IdRequest) returns (Metadata) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}"
    };
  }

  rpc AddMetadata(AddMetadataRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/metadata"
      body: "*"
    };
  }

  rpc GetMetadataDownloadUrl(bosca.IdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/url"
    };
  }

  rpc AddMetadataSupplementary(AddSupplementaryRequest) returns (SignedUrl) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/url/supplementary/{type}/upload"
    };
  }

  rpc GetMetadataSupplementaryDownloadUrl(SupplementaryIdRequest) returns (SignedUrl) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/url/supplementary/{type}/download"
    };
  }

  rpc DeleteMetadataSupplementary(SupplementaryIdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      delete: "/v1/content/metadata/{id}/url/supplementary/{type}"
    };
  }

  rpc SetMetadataUploaded(bosca.IdRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/uploaded"
    };
  }

  rpc GetMetadataPermissions(bosca.IdRequest) returns (Permissions) {
    option (google.api.http) = {
      get: "/v1/content/metadata/{id}/permissions"
    };
  }

  rpc AddMetadataPermissions(Permissions) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/permissions"
      body: "*"
    };
  }

  rpc AddMetadataPermission(Permission) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/permission"
      body: "*"
    };
  }

  rpc SetMetadataStatus (SetMetadataStatusRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/status"
      body: "*"
    };
  }

  rpc ProcessMetadata (bosca.IdRequest) returns (bosca.Empty) {
    option (google.api.http) = {
      post: "/v1/content/metadata/{id}/process"
    };
  }
}

enum PermissionRelation {
  viewers = 0;
  discoverers = 1;
  editors = 2;
  managers = 3;
  serviceaccounts = 4;
  owners = 5;
}

enum PermissionAction {
  view = 0;
  list = 2;
  edit = 3;
  manage = 4;
  service = 5;
  delete = 6;
}

message AddSupplementaryRequest {
  string id = 1;
  string type = 2;
  string name = 3;
  string content_type = 4;
  int64 content_length = 5;
}

message SupplementaryIdRequest {
  string id = 1;
  string type = 2;
}

message Permissions {
  string id = 1;
  repeated Permission permissions = 2;
}

enum PermissionSubjectType {
  user = 0;
  group = 1;
  service_account = 2;
}

message Permission {
  string id = 1;
  string subject = 2;
  PermissionSubjectType subject_type = 3;
  PermissionRelation relation = 5;
}

message SetMetadataStatusRequest {
  string id = 1;
  string variant_id = 2;
  MetadataStatus status = 3;
}

enum ItemType {
  unknown = 0;
  collection = 1;
  metadata = 2;
  metadata_variant = 3;
}

message Item {
  string id = 2;
  string name = 3;

  repeated string category_ids = 12;
  repeated string tags = 13;
  map<string, string> attributes = 14;

  google.protobuf.Timestamp created = 20;
  google.protobuf.Timestamp modified = 21;
}

enum CollectionType {
  standard = 0;
  folder = 1;
  root = 2;
}

message AddCollectionRequest {
  string parent = 1;
  Collection collection = 2;
}

message Collection {
  string id = 2;
  string name = 3;

  CollectionType type = 5;

  repeated string category_ids = 12;
  repeated string tags = 13;
  map<string, string> attributes = 14;

  google.protobuf.Timestamp created = 20;
  google.protobuf.Timestamp modified = 21;
}

message CollectionItems {
  repeated CollectionItem items = 1;
}

message CollectionItem {
  oneof Item {
    Metadata metadata = 1;
    Collection collection = 3;
  }
}

message SignedUrlHeader {
  string name = 1;
  string value = 2;
}

message SignedUrl {
  string id = 1;
  string url = 2;
  string method = 3;
  repeated SignedUrlHeader headers = 4;
  map<string, string> attributes = 5;
}

enum MetadataStatus {
  processing = 0;
  ready = 1;
}

message AddMetadataRequest {
  string collection = 1;
  Metadata metadata = 2;
}

message Metadata {
  string default_id = 1;

  string id = 2;
  string name = 3;
  string content_type = 4;

  string language_tag = 5;
  int64 content_length = 6;

  repeated string trait_ids = 11;
  repeated string category_ids = 12;
  repeated string tags = 13;
  map<string, string> attributes = 14;

  google.protobuf.Timestamp created = 20;
  google.protobuf.Timestamp modified = 21;

  MetadataStatus status = 30;
}
