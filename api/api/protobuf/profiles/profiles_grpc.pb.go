// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profiles

import (
	protobuf "bosca.io/api/protobuf"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilesServiceClient is the client API for ProfilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilesServiceClient interface {
	GetConfiguration(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*ProfileConfiguration, error)
	GetMyProfile(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*Profile, error)
	GetProfileAttributeTypes(ctx context.Context, in *protobuf.IdsRequest, opts ...grpc.CallOption) (*ProfileAttributeTypes, error)
}

type profilesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesServiceClient(cc grpc.ClientConnInterface) ProfilesServiceClient {
	return &profilesServiceClient{cc}
}

func (c *profilesServiceClient) GetConfiguration(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*ProfileConfiguration, error) {
	out := new(ProfileConfiguration)
	err := c.cc.Invoke(ctx, "/bosca.profiles.ProfilesService/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) GetMyProfile(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/bosca.profiles.ProfilesService/GetMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) GetProfileAttributeTypes(ctx context.Context, in *protobuf.IdsRequest, opts ...grpc.CallOption) (*ProfileAttributeTypes, error) {
	out := new(ProfileAttributeTypes)
	err := c.cc.Invoke(ctx, "/bosca.profiles.ProfilesService/GetProfileAttributeTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServiceServer is the server API for ProfilesService service.
// All implementations must embed UnimplementedProfilesServiceServer
// for forward compatibility
type ProfilesServiceServer interface {
	GetConfiguration(context.Context, *protobuf.Empty) (*ProfileConfiguration, error)
	GetMyProfile(context.Context, *protobuf.Empty) (*Profile, error)
	GetProfileAttributeTypes(context.Context, *protobuf.IdsRequest) (*ProfileAttributeTypes, error)
	mustEmbedUnimplementedProfilesServiceServer()
}

// UnimplementedProfilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfilesServiceServer struct {
}

func (UnimplementedProfilesServiceServer) GetConfiguration(context.Context, *protobuf.Empty) (*ProfileConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedProfilesServiceServer) GetMyProfile(context.Context, *protobuf.Empty) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProfile not implemented")
}
func (UnimplementedProfilesServiceServer) GetProfileAttributeTypes(context.Context, *protobuf.IdsRequest) (*ProfileAttributeTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileAttributeTypes not implemented")
}
func (UnimplementedProfilesServiceServer) mustEmbedUnimplementedProfilesServiceServer() {}

// UnsafeProfilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilesServiceServer will
// result in compilation errors.
type UnsafeProfilesServiceServer interface {
	mustEmbedUnimplementedProfilesServiceServer()
}

func RegisterProfilesServiceServer(s grpc.ServiceRegistrar, srv ProfilesServiceServer) {
	s.RegisterService(&ProfilesService_ServiceDesc, srv)
}

func _ProfilesService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosca.profiles.ProfilesService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetConfiguration(ctx, req.(*protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_GetMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosca.profiles.ProfilesService/GetMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetMyProfile(ctx, req.(*protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_GetProfileAttributeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetProfileAttributeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosca.profiles.ProfilesService/GetProfileAttributeTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetProfileAttributeTypes(ctx, req.(*protobuf.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfilesService_ServiceDesc is the grpc.ServiceDesc for ProfilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosca.profiles.ProfilesService",
	HandlerType: (*ProfilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfiguration",
			Handler:    _ProfilesService_GetConfiguration_Handler,
		},
		{
			MethodName: "GetMyProfile",
			Handler:    _ProfilesService_GetMyProfile_Handler,
		},
		{
			MethodName: "GetProfileAttributeTypes",
			Handler:    _ProfilesService_GetProfileAttributeTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiles/profiles.proto",
}
