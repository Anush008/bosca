//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: bosca/workflow/service.proto

package workflow

import (
	bosca "bosca.io/api/protobuf/bosca"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WorkflowService_GetModels_FullMethodName                         = "/bosca.workflow.WorkflowService/GetModels"
	WorkflowService_GetModel_FullMethodName                          = "/bosca.workflow.WorkflowService/GetModel"
	WorkflowService_GetPrompts_FullMethodName                        = "/bosca.workflow.WorkflowService/GetPrompts"
	WorkflowService_GetPrompt_FullMethodName                         = "/bosca.workflow.WorkflowService/GetPrompt"
	WorkflowService_GetStorageSystems_FullMethodName                 = "/bosca.workflow.WorkflowService/GetStorageSystems"
	WorkflowService_GetStorageSystem_FullMethodName                  = "/bosca.workflow.WorkflowService/GetStorageSystem"
	WorkflowService_GetStorageSystemModels_FullMethodName            = "/bosca.workflow.WorkflowService/GetStorageSystemModels"
	WorkflowService_GetWorkflows_FullMethodName                      = "/bosca.workflow.WorkflowService/GetWorkflows"
	WorkflowService_GetWorkflow_FullMethodName                       = "/bosca.workflow.WorkflowService/GetWorkflow"
	WorkflowService_GetWorkflowState_FullMethodName                  = "/bosca.workflow.WorkflowService/GetWorkflowState"
	WorkflowService_GetWorkflowStates_FullMethodName                 = "/bosca.workflow.WorkflowService/GetWorkflowStates"
	WorkflowService_GetWorkflowActivities_FullMethodName             = "/bosca.workflow.WorkflowService/GetWorkflowActivities"
	WorkflowService_GetWorkflowActivityStorageSystems_FullMethodName = "/bosca.workflow.WorkflowService/GetWorkflowActivityStorageSystems"
	WorkflowService_GetWorkflowActivityPrompts_FullMethodName        = "/bosca.workflow.WorkflowService/GetWorkflowActivityPrompts"
	WorkflowService_BeginTransitionWorkflow_FullMethodName           = "/bosca.workflow.WorkflowService/BeginTransitionWorkflow"
	WorkflowService_CompleteTransitionWorkflow_FullMethodName        = "/bosca.workflow.WorkflowService/CompleteTransitionWorkflow"
	WorkflowService_GetWorkflowActivityJobs_FullMethodName           = "/bosca.workflow.WorkflowService/GetWorkflowActivityJobs"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	GetModels(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Models, error)
	GetModel(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Model, error)
	GetPrompts(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Prompts, error)
	GetPrompt(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Prompt, error)
	GetStorageSystems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*StorageSystems, error)
	GetStorageSystem(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystem, error)
	GetStorageSystemModels(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystemModels, error)
	GetWorkflows(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Workflows, error)
	GetWorkflow(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Workflow, error)
	GetWorkflowState(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*WorkflowState, error)
	GetWorkflowStates(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*WorkflowStates, error)
	GetWorkflowActivities(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*WorkflowActivities, error)
	GetWorkflowActivityStorageSystems(ctx context.Context, in *WorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityStorageSystems, error)
	GetWorkflowActivityPrompts(ctx context.Context, in *WorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityPrompts, error)
	BeginTransitionWorkflow(ctx context.Context, in *BeginTransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	CompleteTransitionWorkflow(ctx context.Context, in *CompleteTransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetWorkflowActivityJobs(ctx context.Context, in *WorkflowActivityJobRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowActivityJobsClient, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) GetModels(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Models, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Models)
	err := c.cc.Invoke(ctx, WorkflowService_GetModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetModel(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Model, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Model)
	err := c.cc.Invoke(ctx, WorkflowService_GetModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetPrompts(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Prompts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prompts)
	err := c.cc.Invoke(ctx, WorkflowService_GetPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetPrompt(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Prompt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prompt)
	err := c.cc.Invoke(ctx, WorkflowService_GetPrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetStorageSystems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*StorageSystems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSystems)
	err := c.cc.Invoke(ctx, WorkflowService_GetStorageSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetStorageSystem(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSystem)
	err := c.cc.Invoke(ctx, WorkflowService_GetStorageSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetStorageSystemModels(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystemModels, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSystemModels)
	err := c.cc.Invoke(ctx, WorkflowService_GetStorageSystemModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflows(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Workflows, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workflows)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Workflow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workflow)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowState(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*WorkflowState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowState)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowStates(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*WorkflowStates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowStates)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowActivities(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*WorkflowActivities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowActivities)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowActivityStorageSystems(ctx context.Context, in *WorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityStorageSystems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowActivityStorageSystems)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowActivityStorageSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowActivityPrompts(ctx context.Context, in *WorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityPrompts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowActivityPrompts)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowActivityPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) BeginTransitionWorkflow(ctx context.Context, in *BeginTransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, WorkflowService_BeginTransitionWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CompleteTransitionWorkflow(ctx context.Context, in *CompleteTransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, WorkflowService_CompleteTransitionWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowActivityJobs(ctx context.Context, in *WorkflowActivityJobRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowActivityJobsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorkflowService_ServiceDesc.Streams[0], WorkflowService_GetWorkflowActivityJobs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &workflowServiceGetWorkflowActivityJobsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkflowService_GetWorkflowActivityJobsClient interface {
	Recv() (*WorkflowActivityJob, error)
	grpc.ClientStream
}

type workflowServiceGetWorkflowActivityJobsClient struct {
	grpc.ClientStream
}

func (x *workflowServiceGetWorkflowActivityJobsClient) Recv() (*WorkflowActivityJob, error) {
	m := new(WorkflowActivityJob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility
type WorkflowServiceServer interface {
	GetModels(context.Context, *bosca.Empty) (*Models, error)
	GetModel(context.Context, *bosca.IdRequest) (*Model, error)
	GetPrompts(context.Context, *bosca.Empty) (*Prompts, error)
	GetPrompt(context.Context, *bosca.IdRequest) (*Prompt, error)
	GetStorageSystems(context.Context, *bosca.Empty) (*StorageSystems, error)
	GetStorageSystem(context.Context, *bosca.IdRequest) (*StorageSystem, error)
	GetStorageSystemModels(context.Context, *bosca.IdRequest) (*StorageSystemModels, error)
	GetWorkflows(context.Context, *bosca.Empty) (*Workflows, error)
	GetWorkflow(context.Context, *bosca.IdRequest) (*Workflow, error)
	GetWorkflowState(context.Context, *bosca.IdRequest) (*WorkflowState, error)
	GetWorkflowStates(context.Context, *bosca.Empty) (*WorkflowStates, error)
	GetWorkflowActivities(context.Context, *bosca.IdRequest) (*WorkflowActivities, error)
	GetWorkflowActivityStorageSystems(context.Context, *WorkflowActivityIdRequest) (*WorkflowActivityStorageSystems, error)
	GetWorkflowActivityPrompts(context.Context, *WorkflowActivityIdRequest) (*WorkflowActivityPrompts, error)
	BeginTransitionWorkflow(context.Context, *BeginTransitionWorkflowRequest) (*bosca.Empty, error)
	CompleteTransitionWorkflow(context.Context, *CompleteTransitionWorkflowRequest) (*bosca.Empty, error)
	GetWorkflowActivityJobs(*WorkflowActivityJobRequest, WorkflowService_GetWorkflowActivityJobsServer) error
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (UnimplementedWorkflowServiceServer) GetModels(context.Context, *bosca.Empty) (*Models, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedWorkflowServiceServer) GetModel(context.Context, *bosca.IdRequest) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedWorkflowServiceServer) GetPrompts(context.Context, *bosca.Empty) (*Prompts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompts not implemented")
}
func (UnimplementedWorkflowServiceServer) GetPrompt(context.Context, *bosca.IdRequest) (*Prompt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompt not implemented")
}
func (UnimplementedWorkflowServiceServer) GetStorageSystems(context.Context, *bosca.Empty) (*StorageSystems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSystems not implemented")
}
func (UnimplementedWorkflowServiceServer) GetStorageSystem(context.Context, *bosca.IdRequest) (*StorageSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSystem not implemented")
}
func (UnimplementedWorkflowServiceServer) GetStorageSystemModels(context.Context, *bosca.IdRequest) (*StorageSystemModels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSystemModels not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflows(context.Context, *bosca.Empty) (*Workflows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflow(context.Context, *bosca.IdRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowState(context.Context, *bosca.IdRequest) (*WorkflowState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowState not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowStates(context.Context, *bosca.Empty) (*WorkflowStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowStates not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowActivities(context.Context, *bosca.IdRequest) (*WorkflowActivities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowActivities not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowActivityStorageSystems(context.Context, *WorkflowActivityIdRequest) (*WorkflowActivityStorageSystems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowActivityStorageSystems not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowActivityPrompts(context.Context, *WorkflowActivityIdRequest) (*WorkflowActivityPrompts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowActivityPrompts not implemented")
}
func (UnimplementedWorkflowServiceServer) BeginTransitionWorkflow(context.Context, *BeginTransitionWorkflowRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransitionWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) CompleteTransitionWorkflow(context.Context, *CompleteTransitionWorkflowRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTransitionWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowActivityJobs(*WorkflowActivityJobRequest, WorkflowService_GetWorkflowActivityJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWorkflowActivityJobs not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetModels(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetModel(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetPrompts(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetPrompt(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetStorageSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetStorageSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetStorageSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetStorageSystems(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetStorageSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetStorageSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetStorageSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetStorageSystem(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetStorageSystemModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetStorageSystemModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetStorageSystemModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetStorageSystemModels(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflows(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowState(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowStates(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowActivities(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowActivityStorageSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowActivityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowActivityStorageSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowActivityStorageSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowActivityStorageSystems(ctx, req.(*WorkflowActivityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowActivityPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowActivityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowActivityPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowActivityPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowActivityPrompts(ctx, req.(*WorkflowActivityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_BeginTransitionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransitionWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).BeginTransitionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_BeginTransitionWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).BeginTransitionWorkflow(ctx, req.(*BeginTransitionWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CompleteTransitionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTransitionWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CompleteTransitionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CompleteTransitionWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CompleteTransitionWorkflow(ctx, req.(*CompleteTransitionWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowActivityJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkflowActivityJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowServiceServer).GetWorkflowActivityJobs(m, &workflowServiceGetWorkflowActivityJobsServer{ServerStream: stream})
}

type WorkflowService_GetWorkflowActivityJobsServer interface {
	Send(*WorkflowActivityJob) error
	grpc.ServerStream
}

type workflowServiceGetWorkflowActivityJobsServer struct {
	grpc.ServerStream
}

func (x *workflowServiceGetWorkflowActivityJobsServer) Send(m *WorkflowActivityJob) error {
	return x.ServerStream.SendMsg(m)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosca.workflow.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModels",
			Handler:    _WorkflowService_GetModels_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _WorkflowService_GetModel_Handler,
		},
		{
			MethodName: "GetPrompts",
			Handler:    _WorkflowService_GetPrompts_Handler,
		},
		{
			MethodName: "GetPrompt",
			Handler:    _WorkflowService_GetPrompt_Handler,
		},
		{
			MethodName: "GetStorageSystems",
			Handler:    _WorkflowService_GetStorageSystems_Handler,
		},
		{
			MethodName: "GetStorageSystem",
			Handler:    _WorkflowService_GetStorageSystem_Handler,
		},
		{
			MethodName: "GetStorageSystemModels",
			Handler:    _WorkflowService_GetStorageSystemModels_Handler,
		},
		{
			MethodName: "GetWorkflows",
			Handler:    _WorkflowService_GetWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowState",
			Handler:    _WorkflowService_GetWorkflowState_Handler,
		},
		{
			MethodName: "GetWorkflowStates",
			Handler:    _WorkflowService_GetWorkflowStates_Handler,
		},
		{
			MethodName: "GetWorkflowActivities",
			Handler:    _WorkflowService_GetWorkflowActivities_Handler,
		},
		{
			MethodName: "GetWorkflowActivityStorageSystems",
			Handler:    _WorkflowService_GetWorkflowActivityStorageSystems_Handler,
		},
		{
			MethodName: "GetWorkflowActivityPrompts",
			Handler:    _WorkflowService_GetWorkflowActivityPrompts_Handler,
		},
		{
			MethodName: "BeginTransitionWorkflow",
			Handler:    _WorkflowService_BeginTransitionWorkflow_Handler,
		},
		{
			MethodName: "CompleteTransitionWorkflow",
			Handler:    _WorkflowService_CompleteTransitionWorkflow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWorkflowActivityJobs",
			Handler:       _WorkflowService_GetWorkflowActivityJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bosca/workflow/service.proto",
}
