//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: bosca/content/workflows.proto

package content

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowActivityParameterType int32

const (
	WorkflowActivityParameterType_unknown_activity_parameter_type WorkflowActivityParameterType = 0
	WorkflowActivityParameterType_context                         WorkflowActivityParameterType = 1
	WorkflowActivityParameterType_supplementary                   WorkflowActivityParameterType = 2
	WorkflowActivityParameterType_supplementary_array             WorkflowActivityParameterType = 3
)

// Enum value maps for WorkflowActivityParameterType.
var (
	WorkflowActivityParameterType_name = map[int32]string{
		0: "unknown_activity_parameter_type",
		1: "context",
		2: "supplementary",
		3: "supplementary_array",
	}
	WorkflowActivityParameterType_value = map[string]int32{
		"unknown_activity_parameter_type": 0,
		"context":                         1,
		"supplementary":                   2,
		"supplementary_array":             3,
	}
)

func (x WorkflowActivityParameterType) Enum() *WorkflowActivityParameterType {
	p := new(WorkflowActivityParameterType)
	*p = x
	return p
}

func (x WorkflowActivityParameterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowActivityParameterType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosca_content_workflows_proto_enumTypes[0].Descriptor()
}

func (WorkflowActivityParameterType) Type() protoreflect.EnumType {
	return &file_bosca_content_workflows_proto_enumTypes[0]
}

func (x WorkflowActivityParameterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowActivityParameterType.Descriptor instead.
func (WorkflowActivityParameterType) EnumDescriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{0}
}

type WorkflowStateType int32

const (
	WorkflowStateType_unknown_workflow_type WorkflowStateType = 0
	WorkflowStateType_processing            WorkflowStateType = 1
	WorkflowStateType_draft                 WorkflowStateType = 2
	WorkflowStateType_pending               WorkflowStateType = 3
	WorkflowStateType_approval              WorkflowStateType = 4
	WorkflowStateType_approved              WorkflowStateType = 5
	WorkflowStateType_published             WorkflowStateType = 6
	WorkflowStateType_failure               WorkflowStateType = 7
)

// Enum value maps for WorkflowStateType.
var (
	WorkflowStateType_name = map[int32]string{
		0: "unknown_workflow_type",
		1: "processing",
		2: "draft",
		3: "pending",
		4: "approval",
		5: "approved",
		6: "published",
		7: "failure",
	}
	WorkflowStateType_value = map[string]int32{
		"unknown_workflow_type": 0,
		"processing":            1,
		"draft":                 2,
		"pending":               3,
		"approval":              4,
		"approved":              5,
		"published":             6,
		"failure":               7,
	}
)

func (x WorkflowStateType) Enum() *WorkflowStateType {
	p := new(WorkflowStateType)
	*p = x
	return p
}

func (x WorkflowStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosca_content_workflows_proto_enumTypes[1].Descriptor()
}

func (WorkflowStateType) Type() protoreflect.EnumType {
	return &file_bosca_content_workflows_proto_enumTypes[1]
}

func (x WorkflowStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStateType.Descriptor instead.
func (WorkflowStateType) EnumDescriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{1}
}

type Workflows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflows []*Workflow `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *Workflows) Reset() {
	*x = Workflows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflows) ProtoMessage() {}

func (x *Workflows) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflows.ProtoReflect.Descriptor instead.
func (*Workflows) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{0}
}

func (x *Workflows) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type WorkflowActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ChildWorkflow      bool                                     `protobuf:"varint,4,opt,name=child_workflow,json=childWorkflow,proto3" json:"child_workflow,omitempty"`
	ChildWorkflowQueue *string                                  `protobuf:"bytes,5,opt,name=child_workflow_queue,json=childWorkflowQueue,proto3,oneof" json:"child_workflow_queue,omitempty"`
	Configuration      map[string]string                        `protobuf:"bytes,6,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Inputs             map[string]WorkflowActivityParameterType `protobuf:"bytes,7,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=bosca.content.WorkflowActivityParameterType"`
	Outputs            map[string]WorkflowActivityParameterType `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=bosca.content.WorkflowActivityParameterType"`
}

func (x *WorkflowActivity) Reset() {
	*x = WorkflowActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivity) ProtoMessage() {}

func (x *WorkflowActivity) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivity.ProtoReflect.Descriptor instead.
func (*WorkflowActivity) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowActivity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowActivity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowActivity) GetChildWorkflow() bool {
	if x != nil {
		return x.ChildWorkflow
	}
	return false
}

func (x *WorkflowActivity) GetChildWorkflowQueue() string {
	if x != nil && x.ChildWorkflowQueue != nil {
		return *x.ChildWorkflowQueue
	}
	return ""
}

func (x *WorkflowActivity) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *WorkflowActivity) GetInputs() map[string]WorkflowActivityParameterType {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *WorkflowActivity) GetOutputs() map[string]WorkflowActivityParameterType {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Queue         string            `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	Configuration map[string]string `protobuf:"bytes,5,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{2}
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Workflow) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Workflow) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type WorkflowStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*WorkflowState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *WorkflowStates) Reset() {
	*x = WorkflowStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStates) ProtoMessage() {}

func (x *WorkflowStates) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStates.ProtoReflect.Descriptor instead.
func (*WorkflowStates) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowStates) GetStates() []*WorkflowState {
	if x != nil {
		return x.States
	}
	return nil
}

type WorkflowState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type            WorkflowStateType `protobuf:"varint,4,opt,name=type,proto3,enum=bosca.content.WorkflowStateType" json:"type,omitempty"`
	Configuration   map[string]string `protobuf:"bytes,5,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowId      *string           `protobuf:"bytes,6,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	EntryWorkflowId *string           `protobuf:"bytes,7,opt,name=entry_workflow_id,json=entryWorkflowId,proto3,oneof" json:"entry_workflow_id,omitempty"`
	ExitWorkflowId  *string           `protobuf:"bytes,8,opt,name=exit_workflow_id,json=exitWorkflowId,proto3,oneof" json:"exit_workflow_id,omitempty"`
}

func (x *WorkflowState) Reset() {
	*x = WorkflowState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowState) ProtoMessage() {}

func (x *WorkflowState) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowState.ProtoReflect.Descriptor instead.
func (*WorkflowState) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{4}
}

func (x *WorkflowState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowState) GetType() WorkflowStateType {
	if x != nil {
		return x.Type
	}
	return WorkflowStateType_unknown_workflow_type
}

func (x *WorkflowState) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *WorkflowState) GetWorkflowId() string {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return ""
}

func (x *WorkflowState) GetEntryWorkflowId() string {
	if x != nil && x.EntryWorkflowId != nil {
		return *x.EntryWorkflowId
	}
	return ""
}

func (x *WorkflowState) GetExitWorkflowId() string {
	if x != nil && x.ExitWorkflowId != nil {
		return *x.ExitWorkflowId
	}
	return ""
}

type WorkflowStateTransitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transitions []*WorkflowStateTransition `protobuf:"bytes,1,rep,name=transitions,proto3" json:"transitions,omitempty"`
}

func (x *WorkflowStateTransitions) Reset() {
	*x = WorkflowStateTransitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStateTransitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStateTransitions) ProtoMessage() {}

func (x *WorkflowStateTransitions) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStateTransitions.ProtoReflect.Descriptor instead.
func (*WorkflowStateTransitions) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{5}
}

func (x *WorkflowStateTransitions) GetTransitions() []*WorkflowStateTransition {
	if x != nil {
		return x.Transitions
	}
	return nil
}

type WorkflowStateTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromStateId string `protobuf:"bytes,1,opt,name=from_state_id,json=fromStateId,proto3" json:"from_state_id,omitempty"`
	ToStateId   string `protobuf:"bytes,2,opt,name=to_state_id,json=toStateId,proto3" json:"to_state_id,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WorkflowStateTransition) Reset() {
	*x = WorkflowStateTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStateTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStateTransition) ProtoMessage() {}

func (x *WorkflowStateTransition) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStateTransition.ProtoReflect.Descriptor instead.
func (*WorkflowStateTransition) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{6}
}

func (x *WorkflowStateTransition) GetFromStateId() string {
	if x != nil {
		return x.FromStateId
	}
	return ""
}

func (x *WorkflowStateTransition) GetToStateId() string {
	if x != nil {
		return x.ToStateId
	}
	return ""
}

func (x *WorkflowStateTransition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type TransitionWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataId string `protobuf:"bytes,1,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	StateId    string `protobuf:"bytes,2,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Retry      bool   `protobuf:"varint,4,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *TransitionWorkflowRequest) Reset() {
	*x = TransitionWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionWorkflowRequest) ProtoMessage() {}

func (x *TransitionWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionWorkflowRequest.ProtoReflect.Descriptor instead.
func (*TransitionWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{7}
}

func (x *TransitionWorkflowRequest) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *TransitionWorkflowRequest) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

func (x *TransitionWorkflowRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransitionWorkflowRequest) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

type CompleteTransitionWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataId string `protobuf:"bytes,1,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Success    bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CompleteTransitionWorkflowRequest) Reset() {
	*x = CompleteTransitionWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteTransitionWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTransitionWorkflowRequest) ProtoMessage() {}

func (x *CompleteTransitionWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTransitionWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CompleteTransitionWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{8}
}

func (x *CompleteTransitionWorkflowRequest) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *CompleteTransitionWorkflowRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CompleteTransitionWorkflowRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type WorkflowActivityParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*WorkflowActivityParameterValue_SingleValue
	//	*WorkflowActivityParameterValue_ArrayValue
	Value isWorkflowActivityParameterValue_Value `protobuf_oneof:"value"`
}

func (x *WorkflowActivityParameterValue) Reset() {
	*x = WorkflowActivityParameterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityParameterValue) ProtoMessage() {}

func (x *WorkflowActivityParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityParameterValue.ProtoReflect.Descriptor instead.
func (*WorkflowActivityParameterValue) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{9}
}

func (m *WorkflowActivityParameterValue) GetValue() isWorkflowActivityParameterValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *WorkflowActivityParameterValue) GetSingleValue() string {
	if x, ok := x.GetValue().(*WorkflowActivityParameterValue_SingleValue); ok {
		return x.SingleValue
	}
	return ""
}

func (x *WorkflowActivityParameterValue) GetArrayValue() *WorkflowActivityParameterValues {
	if x, ok := x.GetValue().(*WorkflowActivityParameterValue_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

type isWorkflowActivityParameterValue_Value interface {
	isWorkflowActivityParameterValue_Value()
}

type WorkflowActivityParameterValue_SingleValue struct {
	SingleValue string `protobuf:"bytes,1,opt,name=single_value,json=singleValue,proto3,oneof"`
}

type WorkflowActivityParameterValue_ArrayValue struct {
	ArrayValue *WorkflowActivityParameterValues `protobuf:"bytes,2,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

func (*WorkflowActivityParameterValue_SingleValue) isWorkflowActivityParameterValue_Value() {}

func (*WorkflowActivityParameterValue_ArrayValue) isWorkflowActivityParameterValue_Value() {}

type WorkflowActivityParameterValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *WorkflowActivityParameterValues) Reset() {
	*x = WorkflowActivityParameterValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityParameterValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityParameterValues) ProtoMessage() {}

func (x *WorkflowActivityParameterValues) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityParameterValues.ProtoReflect.Descriptor instead.
func (*WorkflowActivityParameterValues) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowActivityParameterValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type WorkflowActivityInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId         int64                                      `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id                 string                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ChildWorkflow      bool                                       `protobuf:"varint,3,opt,name=child_workflow,json=childWorkflow,proto3" json:"child_workflow,omitempty"`
	ChildWorkflowQueue *string                                    `protobuf:"bytes,4,opt,name=child_workflow_queue,json=childWorkflowQueue,proto3,oneof" json:"child_workflow_queue,omitempty"`
	ExecutionGroup     int32                                      `protobuf:"varint,5,opt,name=execution_group,json=executionGroup,proto3" json:"execution_group,omitempty"`
	Prompts            []*WorkflowActivityPrompt                  `protobuf:"bytes,6,rep,name=prompts,proto3" json:"prompts,omitempty"`
	StorageSystems     []*WorkflowActivityStorageSystem           `protobuf:"bytes,7,rep,name=storage_systems,json=storageSystems,proto3" json:"storage_systems,omitempty"`
	Models             []*WorkflowActivityModel                   `protobuf:"bytes,8,rep,name=models,proto3" json:"models,omitempty"`
	Configuration      map[string]string                          `protobuf:"bytes,9,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Inputs             map[string]*WorkflowActivityParameterValue `protobuf:"bytes,10,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs            map[string]*WorkflowActivityParameterValue `protobuf:"bytes,11,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowActivityInstance) Reset() {
	*x = WorkflowActivityInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityInstance) ProtoMessage() {}

func (x *WorkflowActivityInstance) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityInstance.ProtoReflect.Descriptor instead.
func (*WorkflowActivityInstance) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowActivityInstance) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *WorkflowActivityInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowActivityInstance) GetChildWorkflow() bool {
	if x != nil {
		return x.ChildWorkflow
	}
	return false
}

func (x *WorkflowActivityInstance) GetChildWorkflowQueue() string {
	if x != nil && x.ChildWorkflowQueue != nil {
		return *x.ChildWorkflowQueue
	}
	return ""
}

func (x *WorkflowActivityInstance) GetExecutionGroup() int32 {
	if x != nil {
		return x.ExecutionGroup
	}
	return 0
}

func (x *WorkflowActivityInstance) GetPrompts() []*WorkflowActivityPrompt {
	if x != nil {
		return x.Prompts
	}
	return nil
}

func (x *WorkflowActivityInstance) GetStorageSystems() []*WorkflowActivityStorageSystem {
	if x != nil {
		return x.StorageSystems
	}
	return nil
}

func (x *WorkflowActivityInstance) GetModels() []*WorkflowActivityModel {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *WorkflowActivityInstance) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *WorkflowActivityInstance) GetInputs() map[string]*WorkflowActivityParameterValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *WorkflowActivityInstance) GetOutputs() map[string]*WorkflowActivityParameterValue {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type WorkflowActivityInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*WorkflowActivityInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *WorkflowActivityInstances) Reset() {
	*x = WorkflowActivityInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityInstances) ProtoMessage() {}

func (x *WorkflowActivityInstances) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityInstances.ProtoReflect.Descriptor instead.
func (*WorkflowActivityInstances) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{12}
}

func (x *WorkflowActivityInstances) GetInstances() []*WorkflowActivityInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type WorkflowActivityIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	ActivityId string `protobuf:"bytes,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *WorkflowActivityIdRequest) Reset() {
	*x = WorkflowActivityIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityIdRequest) ProtoMessage() {}

func (x *WorkflowActivityIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityIdRequest.ProtoReflect.Descriptor instead.
func (*WorkflowActivityIdRequest) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{13}
}

func (x *WorkflowActivityIdRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowActivityIdRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type WorkflowActivityExecutionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId           string                                     `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Activities           []*WorkflowActivityInstance                `protobuf:"bytes,2,rep,name=activities,proto3" json:"activities,omitempty"`
	CurrentActivityIndex int32                                      `protobuf:"varint,3,opt,name=current_activity_index,json=currentActivityIndex,proto3" json:"current_activity_index,omitempty"`
	Metadata             *Metadata                                  `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Context              map[string]*WorkflowActivityParameterValue `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowActivityExecutionContext) Reset() {
	*x = WorkflowActivityExecutionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityExecutionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityExecutionContext) ProtoMessage() {}

func (x *WorkflowActivityExecutionContext) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityExecutionContext.ProtoReflect.Descriptor instead.
func (*WorkflowActivityExecutionContext) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{14}
}

func (x *WorkflowActivityExecutionContext) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowActivityExecutionContext) GetActivities() []*WorkflowActivityInstance {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *WorkflowActivityExecutionContext) GetCurrentActivityIndex() int32 {
	if x != nil {
		return x.CurrentActivityIndex
	}
	return 0
}

func (x *WorkflowActivityExecutionContext) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkflowActivityExecutionContext) GetContext() map[string]*WorkflowActivityParameterValue {
	if x != nil {
		return x.Context
	}
	return nil
}

type WorkflowActivityStorageSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageSystem *StorageSystem        `protobuf:"bytes,1,opt,name=storage_system,json=storageSystem,proto3" json:"storage_system,omitempty"`
	Models        []*StorageSystemModel `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	Configuration map[string]string     `protobuf:"bytes,3,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowActivityStorageSystem) Reset() {
	*x = WorkflowActivityStorageSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityStorageSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityStorageSystem) ProtoMessage() {}

func (x *WorkflowActivityStorageSystem) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityStorageSystem.ProtoReflect.Descriptor instead.
func (*WorkflowActivityStorageSystem) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{15}
}

func (x *WorkflowActivityStorageSystem) GetStorageSystem() *StorageSystem {
	if x != nil {
		return x.StorageSystem
	}
	return nil
}

func (x *WorkflowActivityStorageSystem) GetModels() []*StorageSystemModel {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *WorkflowActivityStorageSystem) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type WorkflowActivityModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model         *Model            `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Configuration map[string]string `protobuf:"bytes,2,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowActivityModel) Reset() {
	*x = WorkflowActivityModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityModel) ProtoMessage() {}

func (x *WorkflowActivityModel) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityModel.ProtoReflect.Descriptor instead.
func (*WorkflowActivityModel) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{16}
}

func (x *WorkflowActivityModel) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *WorkflowActivityModel) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type WorkflowActivityStorageSystems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Systems []*WorkflowActivityStorageSystem `protobuf:"bytes,1,rep,name=systems,proto3" json:"systems,omitempty"`
}

func (x *WorkflowActivityStorageSystems) Reset() {
	*x = WorkflowActivityStorageSystems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityStorageSystems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityStorageSystems) ProtoMessage() {}

func (x *WorkflowActivityStorageSystems) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityStorageSystems.ProtoReflect.Descriptor instead.
func (*WorkflowActivityStorageSystems) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{17}
}

func (x *WorkflowActivityStorageSystems) GetSystems() []*WorkflowActivityStorageSystem {
	if x != nil {
		return x.Systems
	}
	return nil
}

type WorkflowActivityPrompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt        *Prompt           `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Configuration map[string]string `protobuf:"bytes,2,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowActivityPrompt) Reset() {
	*x = WorkflowActivityPrompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityPrompt) ProtoMessage() {}

func (x *WorkflowActivityPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityPrompt.ProtoReflect.Descriptor instead.
func (*WorkflowActivityPrompt) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{18}
}

func (x *WorkflowActivityPrompt) GetPrompt() *Prompt {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (x *WorkflowActivityPrompt) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type WorkflowActivityPrompts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompts []*WorkflowActivityPrompt `protobuf:"bytes,1,rep,name=prompts,proto3" json:"prompts,omitempty"`
}

func (x *WorkflowActivityPrompts) Reset() {
	*x = WorkflowActivityPrompts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosca_content_workflows_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowActivityPrompts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowActivityPrompts) ProtoMessage() {}

func (x *WorkflowActivityPrompts) ProtoReflect() protoreflect.Message {
	mi := &file_bosca_content_workflows_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowActivityPrompts.ProtoReflect.Descriptor instead.
func (*WorkflowActivityPrompts) Descriptor() ([]byte, []int) {
	return file_bosca_content_workflows_proto_rawDescGZIP(), []int{19}
}

func (x *WorkflowActivityPrompts) GetPrompts() []*WorkflowActivityPrompt {
	if x != nil {
		return x.Prompts
	}
	return nil
}

var File_bosca_content_workflows_proto protoreflect.FileDescriptor

var file_bosca_content_workflows_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1c,
	0x62, 0x6f, 0x73, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6f,
	0x73, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6f, 0x73, 0x63, 0x61,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x62, 0x6f, 0x73, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x09, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x63,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xcb, 0x05,
	0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x35, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x67, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x63,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f,
	0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73,
	0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xe5, 0x03, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x55,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x63,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7f,
	0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x85, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0x76, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xa1, 0x01, 0x0a, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd7,
	0x07, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f,
	0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6f,
	0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x6f, 0x73, 0x63,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x0b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73,
	0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x19,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xba, 0x03, 0x0a, 0x20,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x69, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x02, 0x0a, 0x1d, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x39, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x1e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x07,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12,
	0x2d, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x5e,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5a, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x6f, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x2a, 0x7d, 0x0a, 0x1d,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x10, 0x03, 0x2a, 0x8e, 0x01, 0x0a, 0x11,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x07, 0x42, 0x25, 0x5a, 0x23,
	0x62, 0x6f, 0x73, 0x63, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x62, 0x6f, 0x73, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosca_content_workflows_proto_rawDescOnce sync.Once
	file_bosca_content_workflows_proto_rawDescData = file_bosca_content_workflows_proto_rawDesc
)

func file_bosca_content_workflows_proto_rawDescGZIP() []byte {
	file_bosca_content_workflows_proto_rawDescOnce.Do(func() {
		file_bosca_content_workflows_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosca_content_workflows_proto_rawDescData)
	})
	return file_bosca_content_workflows_proto_rawDescData
}

var file_bosca_content_workflows_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bosca_content_workflows_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_bosca_content_workflows_proto_goTypes = []any{
	(WorkflowActivityParameterType)(0),        // 0: bosca.content.WorkflowActivityParameterType
	(WorkflowStateType)(0),                    // 1: bosca.content.WorkflowStateType
	(*Workflows)(nil),                         // 2: bosca.content.Workflows
	(*WorkflowActivity)(nil),                  // 3: bosca.content.WorkflowActivity
	(*Workflow)(nil),                          // 4: bosca.content.Workflow
	(*WorkflowStates)(nil),                    // 5: bosca.content.WorkflowStates
	(*WorkflowState)(nil),                     // 6: bosca.content.WorkflowState
	(*WorkflowStateTransitions)(nil),          // 7: bosca.content.WorkflowStateTransitions
	(*WorkflowStateTransition)(nil),           // 8: bosca.content.WorkflowStateTransition
	(*TransitionWorkflowRequest)(nil),         // 9: bosca.content.TransitionWorkflowRequest
	(*CompleteTransitionWorkflowRequest)(nil), // 10: bosca.content.CompleteTransitionWorkflowRequest
	(*WorkflowActivityParameterValue)(nil),    // 11: bosca.content.WorkflowActivityParameterValue
	(*WorkflowActivityParameterValues)(nil),   // 12: bosca.content.WorkflowActivityParameterValues
	(*WorkflowActivityInstance)(nil),          // 13: bosca.content.WorkflowActivityInstance
	(*WorkflowActivityInstances)(nil),         // 14: bosca.content.WorkflowActivityInstances
	(*WorkflowActivityIdRequest)(nil),         // 15: bosca.content.WorkflowActivityIdRequest
	(*WorkflowActivityExecutionContext)(nil),  // 16: bosca.content.WorkflowActivityExecutionContext
	(*WorkflowActivityStorageSystem)(nil),     // 17: bosca.content.WorkflowActivityStorageSystem
	(*WorkflowActivityModel)(nil),             // 18: bosca.content.WorkflowActivityModel
	(*WorkflowActivityStorageSystems)(nil),    // 19: bosca.content.WorkflowActivityStorageSystems
	(*WorkflowActivityPrompt)(nil),            // 20: bosca.content.WorkflowActivityPrompt
	(*WorkflowActivityPrompts)(nil),           // 21: bosca.content.WorkflowActivityPrompts
	nil,                                       // 22: bosca.content.WorkflowActivity.ConfigurationEntry
	nil,                                       // 23: bosca.content.WorkflowActivity.InputsEntry
	nil,                                       // 24: bosca.content.WorkflowActivity.OutputsEntry
	nil,                                       // 25: bosca.content.Workflow.ConfigurationEntry
	nil,                                       // 26: bosca.content.WorkflowState.ConfigurationEntry
	nil,                                       // 27: bosca.content.WorkflowActivityInstance.ConfigurationEntry
	nil,                                       // 28: bosca.content.WorkflowActivityInstance.InputsEntry
	nil,                                       // 29: bosca.content.WorkflowActivityInstance.OutputsEntry
	nil,                                       // 30: bosca.content.WorkflowActivityExecutionContext.ContextEntry
	nil,                                       // 31: bosca.content.WorkflowActivityStorageSystem.ConfigurationEntry
	nil,                                       // 32: bosca.content.WorkflowActivityModel.ConfigurationEntry
	nil,                                       // 33: bosca.content.WorkflowActivityPrompt.ConfigurationEntry
	(*Metadata)(nil),                          // 34: bosca.content.Metadata
	(*StorageSystem)(nil),                     // 35: bosca.content.StorageSystem
	(*StorageSystemModel)(nil),                // 36: bosca.content.StorageSystemModel
	(*Model)(nil),                             // 37: bosca.content.Model
	(*Prompt)(nil),                            // 38: bosca.content.Prompt
}
var file_bosca_content_workflows_proto_depIdxs = []int32{
	4,  // 0: bosca.content.Workflows.workflows:type_name -> bosca.content.Workflow
	22, // 1: bosca.content.WorkflowActivity.configuration:type_name -> bosca.content.WorkflowActivity.ConfigurationEntry
	23, // 2: bosca.content.WorkflowActivity.inputs:type_name -> bosca.content.WorkflowActivity.InputsEntry
	24, // 3: bosca.content.WorkflowActivity.outputs:type_name -> bosca.content.WorkflowActivity.OutputsEntry
	25, // 4: bosca.content.Workflow.configuration:type_name -> bosca.content.Workflow.ConfigurationEntry
	6,  // 5: bosca.content.WorkflowStates.states:type_name -> bosca.content.WorkflowState
	1,  // 6: bosca.content.WorkflowState.type:type_name -> bosca.content.WorkflowStateType
	26, // 7: bosca.content.WorkflowState.configuration:type_name -> bosca.content.WorkflowState.ConfigurationEntry
	8,  // 8: bosca.content.WorkflowStateTransitions.transitions:type_name -> bosca.content.WorkflowStateTransition
	12, // 9: bosca.content.WorkflowActivityParameterValue.array_value:type_name -> bosca.content.WorkflowActivityParameterValues
	20, // 10: bosca.content.WorkflowActivityInstance.prompts:type_name -> bosca.content.WorkflowActivityPrompt
	17, // 11: bosca.content.WorkflowActivityInstance.storage_systems:type_name -> bosca.content.WorkflowActivityStorageSystem
	18, // 12: bosca.content.WorkflowActivityInstance.models:type_name -> bosca.content.WorkflowActivityModel
	27, // 13: bosca.content.WorkflowActivityInstance.configuration:type_name -> bosca.content.WorkflowActivityInstance.ConfigurationEntry
	28, // 14: bosca.content.WorkflowActivityInstance.inputs:type_name -> bosca.content.WorkflowActivityInstance.InputsEntry
	29, // 15: bosca.content.WorkflowActivityInstance.outputs:type_name -> bosca.content.WorkflowActivityInstance.OutputsEntry
	13, // 16: bosca.content.WorkflowActivityInstances.instances:type_name -> bosca.content.WorkflowActivityInstance
	13, // 17: bosca.content.WorkflowActivityExecutionContext.activities:type_name -> bosca.content.WorkflowActivityInstance
	34, // 18: bosca.content.WorkflowActivityExecutionContext.metadata:type_name -> bosca.content.Metadata
	30, // 19: bosca.content.WorkflowActivityExecutionContext.context:type_name -> bosca.content.WorkflowActivityExecutionContext.ContextEntry
	35, // 20: bosca.content.WorkflowActivityStorageSystem.storage_system:type_name -> bosca.content.StorageSystem
	36, // 21: bosca.content.WorkflowActivityStorageSystem.models:type_name -> bosca.content.StorageSystemModel
	31, // 22: bosca.content.WorkflowActivityStorageSystem.configuration:type_name -> bosca.content.WorkflowActivityStorageSystem.ConfigurationEntry
	37, // 23: bosca.content.WorkflowActivityModel.model:type_name -> bosca.content.Model
	32, // 24: bosca.content.WorkflowActivityModel.configuration:type_name -> bosca.content.WorkflowActivityModel.ConfigurationEntry
	17, // 25: bosca.content.WorkflowActivityStorageSystems.systems:type_name -> bosca.content.WorkflowActivityStorageSystem
	38, // 26: bosca.content.WorkflowActivityPrompt.prompt:type_name -> bosca.content.Prompt
	33, // 27: bosca.content.WorkflowActivityPrompt.configuration:type_name -> bosca.content.WorkflowActivityPrompt.ConfigurationEntry
	20, // 28: bosca.content.WorkflowActivityPrompts.prompts:type_name -> bosca.content.WorkflowActivityPrompt
	0,  // 29: bosca.content.WorkflowActivity.InputsEntry.value:type_name -> bosca.content.WorkflowActivityParameterType
	0,  // 30: bosca.content.WorkflowActivity.OutputsEntry.value:type_name -> bosca.content.WorkflowActivityParameterType
	11, // 31: bosca.content.WorkflowActivityInstance.InputsEntry.value:type_name -> bosca.content.WorkflowActivityParameterValue
	11, // 32: bosca.content.WorkflowActivityInstance.OutputsEntry.value:type_name -> bosca.content.WorkflowActivityParameterValue
	11, // 33: bosca.content.WorkflowActivityExecutionContext.ContextEntry.value:type_name -> bosca.content.WorkflowActivityParameterValue
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_bosca_content_workflows_proto_init() }
func file_bosca_content_workflows_proto_init() {
	if File_bosca_content_workflows_proto != nil {
		return
	}
	file_bosca_content_metadata_proto_init()
	file_bosca_content_prompts_proto_init()
	file_bosca_content_storage_systems_proto_init()
	file_bosca_content_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosca_content_workflows_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Workflows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowStateTransitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowStateTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TransitionWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CompleteTransitionWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityParameterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityParameterValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityExecutionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityStorageSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityStorageSystems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityPrompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosca_content_workflows_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowActivityPrompts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosca_content_workflows_proto_msgTypes[1].OneofWrappers = []any{}
	file_bosca_content_workflows_proto_msgTypes[4].OneofWrappers = []any{}
	file_bosca_content_workflows_proto_msgTypes[9].OneofWrappers = []any{
		(*WorkflowActivityParameterValue_SingleValue)(nil),
		(*WorkflowActivityParameterValue_ArrayValue)(nil),
	}
	file_bosca_content_workflows_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosca_content_workflows_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosca_content_workflows_proto_goTypes,
		DependencyIndexes: file_bosca_content_workflows_proto_depIdxs,
		EnumInfos:         file_bosca_content_workflows_proto_enumTypes,
		MessageInfos:      file_bosca_content_workflows_proto_msgTypes,
	}.Build()
	File_bosca_content_workflows_proto = out.File
	file_bosca_content_workflows_proto_rawDesc = nil
	file_bosca_content_workflows_proto_goTypes = nil
	file_bosca_content_workflows_proto_depIdxs = nil
}
