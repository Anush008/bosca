//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: bosca/content/service.proto

package content

import (
	bosca "bosca.io/api/protobuf/bosca"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContentService_GetSources_FullMethodName                          = "/bosca.content.ContentService/GetSources"
	ContentService_GetSource_FullMethodName                           = "/bosca.content.ContentService/GetSource"
	ContentService_GetTraits_FullMethodName                           = "/bosca.content.ContentService/GetTraits"
	ContentService_GetTrait_FullMethodName                            = "/bosca.content.ContentService/GetTrait"
	ContentService_GetRootCollectionItems_FullMethodName              = "/bosca.content.ContentService/GetRootCollectionItems"
	ContentService_GetCollectionItems_FullMethodName                  = "/bosca.content.ContentService/GetCollectionItems"
	ContentService_AddCollection_FullMethodName                       = "/bosca.content.ContentService/AddCollection"
	ContentService_AddCollections_FullMethodName                      = "/bosca.content.ContentService/AddCollections"
	ContentService_GetCollection_FullMethodName                       = "/bosca.content.ContentService/GetCollection"
	ContentService_DeleteCollection_FullMethodName                    = "/bosca.content.ContentService/DeleteCollection"
	ContentService_GetCollectionPermissions_FullMethodName            = "/bosca.content.ContentService/GetCollectionPermissions"
	ContentService_AddCollectionPermission_FullMethodName             = "/bosca.content.ContentService/AddCollectionPermission"
	ContentService_AddCollectionItem_FullMethodName                   = "/bosca.content.ContentService/AddCollectionItem"
	ContentService_CheckPermission_FullMethodName                     = "/bosca.content.ContentService/CheckPermission"
	ContentService_FindCollection_FullMethodName                      = "/bosca.content.ContentService/FindCollection"
	ContentService_FindMetadata_FullMethodName                        = "/bosca.content.ContentService/FindMetadata"
	ContentService_GetMetadata_FullMethodName                         = "/bosca.content.ContentService/GetMetadata"
	ContentService_GetMetadatas_FullMethodName                        = "/bosca.content.ContentService/GetMetadatas"
	ContentService_AddMetadata_FullMethodName                         = "/bosca.content.ContentService/AddMetadata"
	ContentService_AddMetadatas_FullMethodName                        = "/bosca.content.ContentService/AddMetadatas"
	ContentService_AddMetadataTrait_FullMethodName                    = "/bosca.content.ContentService/AddMetadataTrait"
	ContentService_DeleteMetadata_FullMethodName                      = "/bosca.content.ContentService/DeleteMetadata"
	ContentService_GetMetadataUploadUrl_FullMethodName                = "/bosca.content.ContentService/GetMetadataUploadUrl"
	ContentService_GetMetadataDownloadUrl_FullMethodName              = "/bosca.content.ContentService/GetMetadataDownloadUrl"
	ContentService_AddMetadataSupplementary_FullMethodName            = "/bosca.content.ContentService/AddMetadataSupplementary"
	ContentService_SetMetadataSupplementaryUploaded_FullMethodName    = "/bosca.content.ContentService/SetMetadataSupplementaryUploaded"
	ContentService_GetMetadataSupplementaryUploadUrl_FullMethodName   = "/bosca.content.ContentService/GetMetadataSupplementaryUploadUrl"
	ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName = "/bosca.content.ContentService/GetMetadataSupplementaryDownloadUrl"
	ContentService_DeleteMetadataSupplementary_FullMethodName         = "/bosca.content.ContentService/DeleteMetadataSupplementary"
	ContentService_GetMetadataSupplementaries_FullMethodName          = "/bosca.content.ContentService/GetMetadataSupplementaries"
	ContentService_SetMetadataUploaded_FullMethodName                 = "/bosca.content.ContentService/SetMetadataUploaded"
	ContentService_GetMetadataPermissions_FullMethodName              = "/bosca.content.ContentService/GetMetadataPermissions"
	ContentService_AddMetadataPermissions_FullMethodName              = "/bosca.content.ContentService/AddMetadataPermissions"
	ContentService_AddMetadataPermission_FullMethodName               = "/bosca.content.ContentService/AddMetadataPermission"
	ContentService_SetWorkflowState_FullMethodName                    = "/bosca.content.ContentService/SetWorkflowState"
	ContentService_SetWorkflowStateComplete_FullMethodName            = "/bosca.content.ContentService/SetWorkflowStateComplete"
	ContentService_AddMetadataRelationship_FullMethodName             = "/bosca.content.ContentService/AddMetadataRelationship"
	ContentService_GetMetadataRelationships_FullMethodName            = "/bosca.content.ContentService/GetMetadataRelationships"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	GetSources(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Sources, error)
	GetSource(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Source, error)
	GetTraits(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Traits, error)
	GetTrait(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Trait, error)
	GetRootCollectionItems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*CollectionItems, error)
	GetCollectionItems(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*CollectionItems, error)
	AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error)
	AddCollections(ctx context.Context, in *AddCollectionsRequest, opts ...grpc.CallOption) (*bosca.IdResponses, error)
	GetCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Collection, error)
	DeleteCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetCollectionPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error)
	AddCollectionPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error)
	AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error)
	FindCollection(ctx context.Context, in *FindCollectionRequest, opts ...grpc.CallOption) (*Collections, error)
	FindMetadata(ctx context.Context, in *FindMetadataRequest, opts ...grpc.CallOption) (*Metadatas, error)
	GetMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Metadata, error)
	GetMetadatas(ctx context.Context, in *bosca.IdsRequest, opts ...grpc.CallOption) (*Metadatas, error)
	AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error)
	AddMetadatas(ctx context.Context, in *AddMetadatasRequest, opts ...grpc.CallOption) (*bosca.IdResponses, error)
	AddMetadataTrait(ctx context.Context, in *AddMetadataTraitRequest, opts ...grpc.CallOption) (*Metadata, error)
	DeleteMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataUploadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GetMetadataDownloadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	AddMetadataSupplementary(ctx context.Context, in *AddSupplementaryRequest, opts ...grpc.CallOption) (*MetadataSupplementary, error)
	SetMetadataSupplementaryUploaded(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataSupplementaryUploadUrl(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GetMetadataSupplementaryDownloadUrl(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	DeleteMetadataSupplementary(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataSupplementaries(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*MetadataSupplementaries, error)
	SetMetadataUploaded(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error)
	AddMetadataPermissions(ctx context.Context, in *Permissions, opts ...grpc.CallOption) (*bosca.Empty, error)
	AddMetadataPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error)
	SetWorkflowState(ctx context.Context, in *SetWorkflowStateRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	SetWorkflowStateComplete(ctx context.Context, in *SetWorkflowStateCompleteRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	AddMetadataRelationship(ctx context.Context, in *MetadataRelationship, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataRelationships(ctx context.Context, in *MetadataRelationshipIdRequest, opts ...grpc.CallOption) (*MetadataRelationships, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) GetSources(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Sources, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Sources)
	err := c.cc.Invoke(ctx, ContentService_GetSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetSource(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Source, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Source)
	err := c.cc.Invoke(ctx, ContentService_GetSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTraits(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Traits, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Traits)
	err := c.cc.Invoke(ctx, ContentService_GetTraits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTrait(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Trait, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Trait)
	err := c.cc.Invoke(ctx, ContentService_GetTrait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetRootCollectionItems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*CollectionItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionItems)
	err := c.cc.Invoke(ctx, ContentService_GetRootCollectionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollectionItems(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*CollectionItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionItems)
	err := c.cc.Invoke(ctx, ContentService_GetCollectionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.IdResponse)
	err := c.cc.Invoke(ctx, ContentService_AddCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollections(ctx context.Context, in *AddCollectionsRequest, opts ...grpc.CallOption) (*bosca.IdResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.IdResponses)
	err := c.cc.Invoke(ctx, ContentService_AddCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Collection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collection)
	err := c.cc.Invoke(ctx, ContentService_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollectionPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissions)
	err := c.cc.Invoke(ctx, ContentService_GetCollectionPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollectionPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddCollectionPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddCollectionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionCheckResponse)
	err := c.cc.Invoke(ctx, ContentService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) FindCollection(ctx context.Context, in *FindCollectionRequest, opts ...grpc.CallOption) (*Collections, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collections)
	err := c.cc.Invoke(ctx, ContentService_FindCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) FindMetadata(ctx context.Context, in *FindMetadataRequest, opts ...grpc.CallOption) (*Metadatas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadatas)
	err := c.cc.Invoke(ctx, ContentService_FindMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadata)
	err := c.cc.Invoke(ctx, ContentService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadatas(ctx context.Context, in *bosca.IdsRequest, opts ...grpc.CallOption) (*Metadatas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadatas)
	err := c.cc.Invoke(ctx, ContentService_GetMetadatas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.IdResponse)
	err := c.cc.Invoke(ctx, ContentService_AddMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadatas(ctx context.Context, in *AddMetadatasRequest, opts ...grpc.CallOption) (*bosca.IdResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.IdResponses)
	err := c.cc.Invoke(ctx, ContentService_AddMetadatas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataTrait(ctx context.Context, in *AddMetadataTraitRequest, opts ...grpc.CallOption) (*Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadata)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataTrait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataUploadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataUploadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataDownloadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataDownloadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataSupplementary(ctx context.Context, in *AddSupplementaryRequest, opts ...grpc.CallOption) (*MetadataSupplementary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataSupplementary)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataSupplementary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetMetadataSupplementaryUploaded(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetMetadataSupplementaryUploaded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataSupplementaryUploadUrl(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataSupplementaryUploadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataSupplementaryDownloadUrl(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteMetadataSupplementary(ctx context.Context, in *bosca.SupplementaryIdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteMetadataSupplementary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataSupplementaries(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*MetadataSupplementaries, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataSupplementaries)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataSupplementaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetMetadataUploaded(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetMetadataUploaded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissions)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataPermissions(ctx context.Context, in *Permissions, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetWorkflowState(ctx context.Context, in *SetWorkflowStateRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetWorkflowState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetWorkflowStateComplete(ctx context.Context, in *SetWorkflowStateCompleteRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetWorkflowStateComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataRelationship(ctx context.Context, in *MetadataRelationship, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataRelationships(ctx context.Context, in *MetadataRelationshipIdRequest, opts ...grpc.CallOption) (*MetadataRelationships, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataRelationships)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	GetSources(context.Context, *bosca.Empty) (*Sources, error)
	GetSource(context.Context, *bosca.IdRequest) (*Source, error)
	GetTraits(context.Context, *bosca.Empty) (*Traits, error)
	GetTrait(context.Context, *bosca.IdRequest) (*Trait, error)
	GetRootCollectionItems(context.Context, *bosca.Empty) (*CollectionItems, error)
	GetCollectionItems(context.Context, *bosca.IdRequest) (*CollectionItems, error)
	AddCollection(context.Context, *AddCollectionRequest) (*bosca.IdResponse, error)
	AddCollections(context.Context, *AddCollectionsRequest) (*bosca.IdResponses, error)
	GetCollection(context.Context, *bosca.IdRequest) (*Collection, error)
	DeleteCollection(context.Context, *bosca.IdRequest) (*bosca.Empty, error)
	GetCollectionPermissions(context.Context, *bosca.IdRequest) (*Permissions, error)
	AddCollectionPermission(context.Context, *Permission) (*bosca.Empty, error)
	AddCollectionItem(context.Context, *AddCollectionItemRequest) (*bosca.Empty, error)
	CheckPermission(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error)
	FindCollection(context.Context, *FindCollectionRequest) (*Collections, error)
	FindMetadata(context.Context, *FindMetadataRequest) (*Metadatas, error)
	GetMetadata(context.Context, *bosca.IdRequest) (*Metadata, error)
	GetMetadatas(context.Context, *bosca.IdsRequest) (*Metadatas, error)
	AddMetadata(context.Context, *AddMetadataRequest) (*bosca.IdResponse, error)
	AddMetadatas(context.Context, *AddMetadatasRequest) (*bosca.IdResponses, error)
	AddMetadataTrait(context.Context, *AddMetadataTraitRequest) (*Metadata, error)
	DeleteMetadata(context.Context, *bosca.IdRequest) (*bosca.Empty, error)
	GetMetadataUploadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error)
	GetMetadataDownloadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error)
	AddMetadataSupplementary(context.Context, *AddSupplementaryRequest) (*MetadataSupplementary, error)
	SetMetadataSupplementaryUploaded(context.Context, *bosca.SupplementaryIdRequest) (*bosca.Empty, error)
	GetMetadataSupplementaryUploadUrl(context.Context, *bosca.SupplementaryIdRequest) (*SignedUrl, error)
	GetMetadataSupplementaryDownloadUrl(context.Context, *bosca.SupplementaryIdRequest) (*SignedUrl, error)
	DeleteMetadataSupplementary(context.Context, *bosca.SupplementaryIdRequest) (*bosca.Empty, error)
	GetMetadataSupplementaries(context.Context, *bosca.IdRequest) (*MetadataSupplementaries, error)
	SetMetadataUploaded(context.Context, *bosca.IdRequest) (*bosca.Empty, error)
	GetMetadataPermissions(context.Context, *bosca.IdRequest) (*Permissions, error)
	AddMetadataPermissions(context.Context, *Permissions) (*bosca.Empty, error)
	AddMetadataPermission(context.Context, *Permission) (*bosca.Empty, error)
	SetWorkflowState(context.Context, *SetWorkflowStateRequest) (*bosca.Empty, error)
	SetWorkflowStateComplete(context.Context, *SetWorkflowStateCompleteRequest) (*bosca.Empty, error)
	AddMetadataRelationship(context.Context, *MetadataRelationship) (*bosca.Empty, error)
	GetMetadataRelationships(context.Context, *MetadataRelationshipIdRequest) (*MetadataRelationships, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) GetSources(context.Context, *bosca.Empty) (*Sources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedContentServiceServer) GetSource(context.Context, *bosca.IdRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedContentServiceServer) GetTraits(context.Context, *bosca.Empty) (*Traits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraits not implemented")
}
func (UnimplementedContentServiceServer) GetTrait(context.Context, *bosca.IdRequest) (*Trait, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrait not implemented")
}
func (UnimplementedContentServiceServer) GetRootCollectionItems(context.Context, *bosca.Empty) (*CollectionItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootCollectionItems not implemented")
}
func (UnimplementedContentServiceServer) GetCollectionItems(context.Context, *bosca.IdRequest) (*CollectionItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionItems not implemented")
}
func (UnimplementedContentServiceServer) AddCollection(context.Context, *AddCollectionRequest) (*bosca.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollection not implemented")
}
func (UnimplementedContentServiceServer) AddCollections(context.Context, *AddCollectionsRequest) (*bosca.IdResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollections not implemented")
}
func (UnimplementedContentServiceServer) GetCollection(context.Context, *bosca.IdRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedContentServiceServer) DeleteCollection(context.Context, *bosca.IdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedContentServiceServer) GetCollectionPermissions(context.Context, *bosca.IdRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddCollectionPermission(context.Context, *Permission) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionPermission not implemented")
}
func (UnimplementedContentServiceServer) AddCollectionItem(context.Context, *AddCollectionItemRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionItem not implemented")
}
func (UnimplementedContentServiceServer) CheckPermission(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedContentServiceServer) FindCollection(context.Context, *FindCollectionRequest) (*Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCollection not implemented")
}
func (UnimplementedContentServiceServer) FindMetadata(context.Context, *FindMetadataRequest) (*Metadatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadata(context.Context, *bosca.IdRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadatas(context.Context, *bosca.IdsRequest) (*Metadatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadatas not implemented")
}
func (UnimplementedContentServiceServer) AddMetadata(context.Context, *AddMetadataRequest) (*bosca.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadata not implemented")
}
func (UnimplementedContentServiceServer) AddMetadatas(context.Context, *AddMetadatasRequest) (*bosca.IdResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadatas not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataTrait(context.Context, *AddMetadataTraitRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataTrait not implemented")
}
func (UnimplementedContentServiceServer) DeleteMetadata(context.Context, *bosca.IdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataUploadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataUploadUrl not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataDownloadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataDownloadUrl not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataSupplementary(context.Context, *AddSupplementaryRequest) (*MetadataSupplementary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataSupplementary not implemented")
}
func (UnimplementedContentServiceServer) SetMetadataSupplementaryUploaded(context.Context, *bosca.SupplementaryIdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataSupplementaryUploaded not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataSupplementaryUploadUrl(context.Context, *bosca.SupplementaryIdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataSupplementaryUploadUrl not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataSupplementaryDownloadUrl(context.Context, *bosca.SupplementaryIdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataSupplementaryDownloadUrl not implemented")
}
func (UnimplementedContentServiceServer) DeleteMetadataSupplementary(context.Context, *bosca.SupplementaryIdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadataSupplementary not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataSupplementaries(context.Context, *bosca.IdRequest) (*MetadataSupplementaries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataSupplementaries not implemented")
}
func (UnimplementedContentServiceServer) SetMetadataUploaded(context.Context, *bosca.IdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataUploaded not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataPermissions(context.Context, *bosca.IdRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataPermissions(context.Context, *Permissions) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataPermission(context.Context, *Permission) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataPermission not implemented")
}
func (UnimplementedContentServiceServer) SetWorkflowState(context.Context, *SetWorkflowStateRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkflowState not implemented")
}
func (UnimplementedContentServiceServer) SetWorkflowStateComplete(context.Context, *SetWorkflowStateCompleteRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkflowStateComplete not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataRelationship(context.Context, *MetadataRelationship) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataRelationship not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataRelationships(context.Context, *MetadataRelationshipIdRequest) (*MetadataRelationships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataRelationships not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetSources(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetSource(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTraits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTraits(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTrait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTrait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTrait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTrait(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetRootCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetRootCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetRootCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetRootCollectionItems(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollectionItems(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollection(ctx, req.(*AddCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollections(ctx, req.(*AddCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollection(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteCollection(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollectionPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollectionPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollectionPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollectionPermissions(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollectionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollectionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollectionPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollectionPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollectionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollectionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollectionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollectionItem(ctx, req.(*AddCollectionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CheckPermission(ctx, req.(*PermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_FindCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).FindCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_FindCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).FindCollection(ctx, req.(*FindCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_FindMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).FindMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_FindMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).FindMetadata(ctx, req.(*FindMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadata(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadatas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadatas(ctx, req.(*bosca.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadata(ctx, req.(*AddMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadatasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadatas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadatas(ctx, req.(*AddMetadatasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataTrait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataTraitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataTrait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataTrait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataTrait(ctx, req.(*AddMetadataTraitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteMetadata(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataUploadUrl(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataDownloadUrl(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataSupplementary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSupplementaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataSupplementary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataSupplementary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataSupplementary(ctx, req.(*AddSupplementaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetMetadataSupplementaryUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetMetadataSupplementaryUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetMetadataSupplementaryUploaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetMetadataSupplementaryUploaded(ctx, req.(*bosca.SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataSupplementaryUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataSupplementaryUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataSupplementaryUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataSupplementaryUploadUrl(ctx, req.(*bosca.SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataSupplementaryDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataSupplementaryDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataSupplementaryDownloadUrl(ctx, req.(*bosca.SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteMetadataSupplementary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteMetadataSupplementary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteMetadataSupplementary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteMetadataSupplementary(ctx, req.(*bosca.SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataSupplementaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataSupplementaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataSupplementaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataSupplementaries(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetMetadataUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetMetadataUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetMetadataUploaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetMetadataUploaded(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataPermissions(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataPermissions(ctx, req.(*Permissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetWorkflowState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkflowStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetWorkflowState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetWorkflowState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetWorkflowState(ctx, req.(*SetWorkflowStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetWorkflowStateComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkflowStateCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetWorkflowStateComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetWorkflowStateComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetWorkflowStateComplete(ctx, req.(*SetWorkflowStateCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataRelationship(ctx, req.(*MetadataRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRelationshipIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataRelationships(ctx, req.(*MetadataRelationshipIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosca.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSources",
			Handler:    _ContentService_GetSources_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _ContentService_GetSource_Handler,
		},
		{
			MethodName: "GetTraits",
			Handler:    _ContentService_GetTraits_Handler,
		},
		{
			MethodName: "GetTrait",
			Handler:    _ContentService_GetTrait_Handler,
		},
		{
			MethodName: "GetRootCollectionItems",
			Handler:    _ContentService_GetRootCollectionItems_Handler,
		},
		{
			MethodName: "GetCollectionItems",
			Handler:    _ContentService_GetCollectionItems_Handler,
		},
		{
			MethodName: "AddCollection",
			Handler:    _ContentService_AddCollection_Handler,
		},
		{
			MethodName: "AddCollections",
			Handler:    _ContentService_AddCollections_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _ContentService_GetCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _ContentService_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollectionPermissions",
			Handler:    _ContentService_GetCollectionPermissions_Handler,
		},
		{
			MethodName: "AddCollectionPermission",
			Handler:    _ContentService_AddCollectionPermission_Handler,
		},
		{
			MethodName: "AddCollectionItem",
			Handler:    _ContentService_AddCollectionItem_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _ContentService_CheckPermission_Handler,
		},
		{
			MethodName: "FindCollection",
			Handler:    _ContentService_FindCollection_Handler,
		},
		{
			MethodName: "FindMetadata",
			Handler:    _ContentService_FindMetadata_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ContentService_GetMetadata_Handler,
		},
		{
			MethodName: "GetMetadatas",
			Handler:    _ContentService_GetMetadatas_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _ContentService_AddMetadata_Handler,
		},
		{
			MethodName: "AddMetadatas",
			Handler:    _ContentService_AddMetadatas_Handler,
		},
		{
			MethodName: "AddMetadataTrait",
			Handler:    _ContentService_AddMetadataTrait_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _ContentService_DeleteMetadata_Handler,
		},
		{
			MethodName: "GetMetadataUploadUrl",
			Handler:    _ContentService_GetMetadataUploadUrl_Handler,
		},
		{
			MethodName: "GetMetadataDownloadUrl",
			Handler:    _ContentService_GetMetadataDownloadUrl_Handler,
		},
		{
			MethodName: "AddMetadataSupplementary",
			Handler:    _ContentService_AddMetadataSupplementary_Handler,
		},
		{
			MethodName: "SetMetadataSupplementaryUploaded",
			Handler:    _ContentService_SetMetadataSupplementaryUploaded_Handler,
		},
		{
			MethodName: "GetMetadataSupplementaryUploadUrl",
			Handler:    _ContentService_GetMetadataSupplementaryUploadUrl_Handler,
		},
		{
			MethodName: "GetMetadataSupplementaryDownloadUrl",
			Handler:    _ContentService_GetMetadataSupplementaryDownloadUrl_Handler,
		},
		{
			MethodName: "DeleteMetadataSupplementary",
			Handler:    _ContentService_DeleteMetadataSupplementary_Handler,
		},
		{
			MethodName: "GetMetadataSupplementaries",
			Handler:    _ContentService_GetMetadataSupplementaries_Handler,
		},
		{
			MethodName: "SetMetadataUploaded",
			Handler:    _ContentService_SetMetadataUploaded_Handler,
		},
		{
			MethodName: "GetMetadataPermissions",
			Handler:    _ContentService_GetMetadataPermissions_Handler,
		},
		{
			MethodName: "AddMetadataPermissions",
			Handler:    _ContentService_AddMetadataPermissions_Handler,
		},
		{
			MethodName: "AddMetadataPermission",
			Handler:    _ContentService_AddMetadataPermission_Handler,
		},
		{
			MethodName: "SetWorkflowState",
			Handler:    _ContentService_SetWorkflowState_Handler,
		},
		{
			MethodName: "SetWorkflowStateComplete",
			Handler:    _ContentService_SetWorkflowStateComplete_Handler,
		},
		{
			MethodName: "AddMetadataRelationship",
			Handler:    _ContentService_AddMetadataRelationship_Handler,
		},
		{
			MethodName: "GetMetadataRelationships",
			Handler:    _ContentService_GetMetadataRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosca/content/service.proto",
}
