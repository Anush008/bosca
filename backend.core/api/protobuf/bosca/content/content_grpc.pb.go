//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: bosca/content/content.proto

package content

import (
	bosca "bosca.io/api/protobuf/bosca"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContentService_GetSources_FullMethodName                          = "/bosca.content.ContentService/GetSources"
	ContentService_GetSource_FullMethodName                           = "/bosca.content.ContentService/GetSource"
	ContentService_GetWorkflows_FullMethodName                        = "/bosca.content.ContentService/GetWorkflows"
	ContentService_GetWorkflow_FullMethodName                         = "/bosca.content.ContentService/GetWorkflow"
	ContentService_GetModels_FullMethodName                           = "/bosca.content.ContentService/GetModels"
	ContentService_GetPrompts_FullMethodName                          = "/bosca.content.ContentService/GetPrompts"
	ContentService_GetStorageSystems_FullMethodName                   = "/bosca.content.ContentService/GetStorageSystems"
	ContentService_GetStorageSystem_FullMethodName                    = "/bosca.content.ContentService/GetStorageSystem"
	ContentService_GetStorageSystemModels_FullMethodName              = "/bosca.content.ContentService/GetStorageSystemModels"
	ContentService_GetWorkflowState_FullMethodName                    = "/bosca.content.ContentService/GetWorkflowState"
	ContentService_GetWorkflowStates_FullMethodName                   = "/bosca.content.ContentService/GetWorkflowStates"
	ContentService_GetTraits_FullMethodName                           = "/bosca.content.ContentService/GetTraits"
	ContentService_GetTrait_FullMethodName                            = "/bosca.content.ContentService/GetTrait"
	ContentService_GetTraitWorkflowInstance_FullMethodName            = "/bosca.content.ContentService/GetTraitWorkflowInstance"
	ContentService_GetTraitWorkflowStorageSystems_FullMethodName      = "/bosca.content.ContentService/GetTraitWorkflowStorageSystems"
	ContentService_GetTraitWorkflowPrompts_FullMethodName             = "/bosca.content.ContentService/GetTraitWorkflowPrompts"
	ContentService_GetRootCollectionItems_FullMethodName              = "/bosca.content.ContentService/GetRootCollectionItems"
	ContentService_GetCollectionItems_FullMethodName                  = "/bosca.content.ContentService/GetCollectionItems"
	ContentService_AddCollection_FullMethodName                       = "/bosca.content.ContentService/AddCollection"
	ContentService_GetCollection_FullMethodName                       = "/bosca.content.ContentService/GetCollection"
	ContentService_DeleteCollection_FullMethodName                    = "/bosca.content.ContentService/DeleteCollection"
	ContentService_GetCollectionPermissions_FullMethodName            = "/bosca.content.ContentService/GetCollectionPermissions"
	ContentService_AddCollectionPermission_FullMethodName             = "/bosca.content.ContentService/AddCollectionPermission"
	ContentService_AddCollectionItem_FullMethodName                   = "/bosca.content.ContentService/AddCollectionItem"
	ContentService_CheckPermission_FullMethodName                     = "/bosca.content.ContentService/CheckPermission"
	ContentService_GetMetadata_FullMethodName                         = "/bosca.content.ContentService/GetMetadata"
	ContentService_GetMetadatas_FullMethodName                        = "/bosca.content.ContentService/GetMetadatas"
	ContentService_AddMetadata_FullMethodName                         = "/bosca.content.ContentService/AddMetadata"
	ContentService_AddMetadataTrait_FullMethodName                    = "/bosca.content.ContentService/AddMetadataTrait"
	ContentService_DeleteMetadata_FullMethodName                      = "/bosca.content.ContentService/DeleteMetadata"
	ContentService_GetMetadataUploadUrl_FullMethodName                = "/bosca.content.ContentService/GetMetadataUploadUrl"
	ContentService_GetMetadataDownloadUrl_FullMethodName              = "/bosca.content.ContentService/GetMetadataDownloadUrl"
	ContentService_AddMetadataSupplementary_FullMethodName            = "/bosca.content.ContentService/AddMetadataSupplementary"
	ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName = "/bosca.content.ContentService/GetMetadataSupplementaryDownloadUrl"
	ContentService_DeleteMetadataSupplementary_FullMethodName         = "/bosca.content.ContentService/DeleteMetadataSupplementary"
	ContentService_SetMetadataUploaded_FullMethodName                 = "/bosca.content.ContentService/SetMetadataUploaded"
	ContentService_GetMetadataPermissions_FullMethodName              = "/bosca.content.ContentService/GetMetadataPermissions"
	ContentService_AddMetadataPermissions_FullMethodName              = "/bosca.content.ContentService/AddMetadataPermissions"
	ContentService_AddMetadataPermission_FullMethodName               = "/bosca.content.ContentService/AddMetadataPermission"
	ContentService_BeginTransitionWorkflow_FullMethodName             = "/bosca.content.ContentService/BeginTransitionWorkflow"
	ContentService_CompleteTransitionWorkflow_FullMethodName          = "/bosca.content.ContentService/CompleteTransitionWorkflow"
	ContentService_AddMetadataRelationship_FullMethodName             = "/bosca.content.ContentService/AddMetadataRelationship"
	ContentService_GetMetadataRelationships_FullMethodName            = "/bosca.content.ContentService/GetMetadataRelationships"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	GetSources(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Sources, error)
	GetSource(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Source, error)
	GetWorkflows(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Workflows, error)
	GetWorkflow(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Workflow, error)
	GetModels(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Models, error)
	GetPrompts(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Prompts, error)
	GetStorageSystems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*StorageSystems, error)
	GetStorageSystem(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystem, error)
	GetStorageSystemModels(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystemModels, error)
	GetWorkflowState(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*WorkflowState, error)
	GetWorkflowStates(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*WorkflowStates, error)
	GetTraits(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Traits, error)
	GetTrait(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Trait, error)
	GetTraitWorkflowInstance(ctx context.Context, in *TraitWorkflowIdRequest, opts ...grpc.CallOption) (*WorkflowInstance, error)
	GetTraitWorkflowStorageSystems(ctx context.Context, in *TraitWorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityStorageSystems, error)
	GetTraitWorkflowPrompts(ctx context.Context, in *TraitWorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityPrompts, error)
	GetRootCollectionItems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*CollectionItems, error)
	GetCollectionItems(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*CollectionItems, error)
	AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error)
	GetCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Collection, error)
	DeleteCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetCollectionPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error)
	AddCollectionPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error)
	AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error)
	GetMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Metadata, error)
	GetMetadatas(ctx context.Context, in *bosca.IdsRequest, opts ...grpc.CallOption) (*Metadatas, error)
	AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error)
	AddMetadataTrait(ctx context.Context, in *AddMetadataTraitRequest, opts ...grpc.CallOption) (*Metadata, error)
	DeleteMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataUploadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GetMetadataDownloadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	AddMetadataSupplementary(ctx context.Context, in *AddSupplementaryRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GetMetadataSupplementaryDownloadUrl(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	DeleteMetadataSupplementary(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	SetMetadataUploaded(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error)
	AddMetadataPermissions(ctx context.Context, in *Permissions, opts ...grpc.CallOption) (*bosca.Empty, error)
	AddMetadataPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error)
	BeginTransitionWorkflow(ctx context.Context, in *TransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	CompleteTransitionWorkflow(ctx context.Context, in *CompleteTransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error)
	AddMetadataRelationship(ctx context.Context, in *MetadataRelationship, opts ...grpc.CallOption) (*bosca.Empty, error)
	GetMetadataRelationships(ctx context.Context, in *MetadataRelationshipIdRequest, opts ...grpc.CallOption) (*MetadataRelationships, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) GetSources(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Sources, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Sources)
	err := c.cc.Invoke(ctx, ContentService_GetSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetSource(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Source, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Source)
	err := c.cc.Invoke(ctx, ContentService_GetSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetWorkflows(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Workflows, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workflows)
	err := c.cc.Invoke(ctx, ContentService_GetWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetWorkflow(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Workflow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workflow)
	err := c.cc.Invoke(ctx, ContentService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetModels(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Models, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Models)
	err := c.cc.Invoke(ctx, ContentService_GetModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetPrompts(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Prompts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prompts)
	err := c.cc.Invoke(ctx, ContentService_GetPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetStorageSystems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*StorageSystems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSystems)
	err := c.cc.Invoke(ctx, ContentService_GetStorageSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetStorageSystem(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSystem)
	err := c.cc.Invoke(ctx, ContentService_GetStorageSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetStorageSystemModels(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*StorageSystemModels, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSystemModels)
	err := c.cc.Invoke(ctx, ContentService_GetStorageSystemModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetWorkflowState(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*WorkflowState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowState)
	err := c.cc.Invoke(ctx, ContentService_GetWorkflowState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetWorkflowStates(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*WorkflowStates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowStates)
	err := c.cc.Invoke(ctx, ContentService_GetWorkflowStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTraits(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*Traits, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Traits)
	err := c.cc.Invoke(ctx, ContentService_GetTraits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTrait(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Trait, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Trait)
	err := c.cc.Invoke(ctx, ContentService_GetTrait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTraitWorkflowInstance(ctx context.Context, in *TraitWorkflowIdRequest, opts ...grpc.CallOption) (*WorkflowInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowInstance)
	err := c.cc.Invoke(ctx, ContentService_GetTraitWorkflowInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTraitWorkflowStorageSystems(ctx context.Context, in *TraitWorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityStorageSystems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowActivityStorageSystems)
	err := c.cc.Invoke(ctx, ContentService_GetTraitWorkflowStorageSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTraitWorkflowPrompts(ctx context.Context, in *TraitWorkflowActivityIdRequest, opts ...grpc.CallOption) (*WorkflowActivityPrompts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowActivityPrompts)
	err := c.cc.Invoke(ctx, ContentService_GetTraitWorkflowPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetRootCollectionItems(ctx context.Context, in *bosca.Empty, opts ...grpc.CallOption) (*CollectionItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionItems)
	err := c.cc.Invoke(ctx, ContentService_GetRootCollectionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollectionItems(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*CollectionItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionItems)
	err := c.cc.Invoke(ctx, ContentService_GetCollectionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.IdResponse)
	err := c.cc.Invoke(ctx, ContentService_AddCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Collection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collection)
	err := c.cc.Invoke(ctx, ContentService_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteCollection(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCollectionPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissions)
	err := c.cc.Invoke(ctx, ContentService_GetCollectionPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollectionPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddCollectionPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddCollectionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionCheckResponse)
	err := c.cc.Invoke(ctx, ContentService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadata)
	err := c.cc.Invoke(ctx, ContentService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadatas(ctx context.Context, in *bosca.IdsRequest, opts ...grpc.CallOption) (*Metadatas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadatas)
	err := c.cc.Invoke(ctx, ContentService_GetMetadatas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*bosca.IdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.IdResponse)
	err := c.cc.Invoke(ctx, ContentService_AddMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataTrait(ctx context.Context, in *AddMetadataTraitRequest, opts ...grpc.CallOption) (*Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metadata)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataTrait_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteMetadata(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataUploadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataUploadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataDownloadUrl(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataDownloadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataSupplementary(ctx context.Context, in *AddSupplementaryRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataSupplementary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataSupplementaryDownloadUrl(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteMetadataSupplementary(ctx context.Context, in *SupplementaryIdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteMetadataSupplementary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SetMetadataUploaded(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_SetMetadataUploaded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataPermissions(ctx context.Context, in *bosca.IdRequest, opts ...grpc.CallOption) (*Permissions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissions)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataPermissions(ctx context.Context, in *Permissions, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) BeginTransitionWorkflow(ctx context.Context, in *TransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_BeginTransitionWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CompleteTransitionWorkflow(ctx context.Context, in *CompleteTransitionWorkflowRequest, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_CompleteTransitionWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddMetadataRelationship(ctx context.Context, in *MetadataRelationship, opts ...grpc.CallOption) (*bosca.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bosca.Empty)
	err := c.cc.Invoke(ctx, ContentService_AddMetadataRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetMetadataRelationships(ctx context.Context, in *MetadataRelationshipIdRequest, opts ...grpc.CallOption) (*MetadataRelationships, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataRelationships)
	err := c.cc.Invoke(ctx, ContentService_GetMetadataRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	GetSources(context.Context, *bosca.Empty) (*Sources, error)
	GetSource(context.Context, *bosca.IdRequest) (*Source, error)
	GetWorkflows(context.Context, *bosca.Empty) (*Workflows, error)
	GetWorkflow(context.Context, *bosca.IdRequest) (*Workflow, error)
	GetModels(context.Context, *bosca.Empty) (*Models, error)
	GetPrompts(context.Context, *bosca.Empty) (*Prompts, error)
	GetStorageSystems(context.Context, *bosca.Empty) (*StorageSystems, error)
	GetStorageSystem(context.Context, *bosca.IdRequest) (*StorageSystem, error)
	GetStorageSystemModels(context.Context, *bosca.IdRequest) (*StorageSystemModels, error)
	GetWorkflowState(context.Context, *bosca.IdRequest) (*WorkflowState, error)
	GetWorkflowStates(context.Context, *bosca.Empty) (*WorkflowStates, error)
	GetTraits(context.Context, *bosca.Empty) (*Traits, error)
	GetTrait(context.Context, *bosca.IdRequest) (*Trait, error)
	GetTraitWorkflowInstance(context.Context, *TraitWorkflowIdRequest) (*WorkflowInstance, error)
	GetTraitWorkflowStorageSystems(context.Context, *TraitWorkflowActivityIdRequest) (*WorkflowActivityStorageSystems, error)
	GetTraitWorkflowPrompts(context.Context, *TraitWorkflowActivityIdRequest) (*WorkflowActivityPrompts, error)
	GetRootCollectionItems(context.Context, *bosca.Empty) (*CollectionItems, error)
	GetCollectionItems(context.Context, *bosca.IdRequest) (*CollectionItems, error)
	AddCollection(context.Context, *AddCollectionRequest) (*bosca.IdResponse, error)
	GetCollection(context.Context, *bosca.IdRequest) (*Collection, error)
	DeleteCollection(context.Context, *bosca.IdRequest) (*bosca.Empty, error)
	GetCollectionPermissions(context.Context, *bosca.IdRequest) (*Permissions, error)
	AddCollectionPermission(context.Context, *Permission) (*bosca.Empty, error)
	AddCollectionItem(context.Context, *AddCollectionItemRequest) (*bosca.Empty, error)
	CheckPermission(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error)
	GetMetadata(context.Context, *bosca.IdRequest) (*Metadata, error)
	GetMetadatas(context.Context, *bosca.IdsRequest) (*Metadatas, error)
	AddMetadata(context.Context, *AddMetadataRequest) (*bosca.IdResponse, error)
	AddMetadataTrait(context.Context, *AddMetadataTraitRequest) (*Metadata, error)
	DeleteMetadata(context.Context, *bosca.IdRequest) (*bosca.Empty, error)
	GetMetadataUploadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error)
	GetMetadataDownloadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error)
	AddMetadataSupplementary(context.Context, *AddSupplementaryRequest) (*SignedUrl, error)
	GetMetadataSupplementaryDownloadUrl(context.Context, *SupplementaryIdRequest) (*SignedUrl, error)
	DeleteMetadataSupplementary(context.Context, *SupplementaryIdRequest) (*bosca.Empty, error)
	SetMetadataUploaded(context.Context, *bosca.IdRequest) (*bosca.Empty, error)
	GetMetadataPermissions(context.Context, *bosca.IdRequest) (*Permissions, error)
	AddMetadataPermissions(context.Context, *Permissions) (*bosca.Empty, error)
	AddMetadataPermission(context.Context, *Permission) (*bosca.Empty, error)
	BeginTransitionWorkflow(context.Context, *TransitionWorkflowRequest) (*bosca.Empty, error)
	CompleteTransitionWorkflow(context.Context, *CompleteTransitionWorkflowRequest) (*bosca.Empty, error)
	AddMetadataRelationship(context.Context, *MetadataRelationship) (*bosca.Empty, error)
	GetMetadataRelationships(context.Context, *MetadataRelationshipIdRequest) (*MetadataRelationships, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) GetSources(context.Context, *bosca.Empty) (*Sources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedContentServiceServer) GetSource(context.Context, *bosca.IdRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedContentServiceServer) GetWorkflows(context.Context, *bosca.Empty) (*Workflows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflows not implemented")
}
func (UnimplementedContentServiceServer) GetWorkflow(context.Context, *bosca.IdRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedContentServiceServer) GetModels(context.Context, *bosca.Empty) (*Models, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedContentServiceServer) GetPrompts(context.Context, *bosca.Empty) (*Prompts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompts not implemented")
}
func (UnimplementedContentServiceServer) GetStorageSystems(context.Context, *bosca.Empty) (*StorageSystems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSystems not implemented")
}
func (UnimplementedContentServiceServer) GetStorageSystem(context.Context, *bosca.IdRequest) (*StorageSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSystem not implemented")
}
func (UnimplementedContentServiceServer) GetStorageSystemModels(context.Context, *bosca.IdRequest) (*StorageSystemModels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSystemModels not implemented")
}
func (UnimplementedContentServiceServer) GetWorkflowState(context.Context, *bosca.IdRequest) (*WorkflowState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowState not implemented")
}
func (UnimplementedContentServiceServer) GetWorkflowStates(context.Context, *bosca.Empty) (*WorkflowStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowStates not implemented")
}
func (UnimplementedContentServiceServer) GetTraits(context.Context, *bosca.Empty) (*Traits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraits not implemented")
}
func (UnimplementedContentServiceServer) GetTrait(context.Context, *bosca.IdRequest) (*Trait, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrait not implemented")
}
func (UnimplementedContentServiceServer) GetTraitWorkflowInstance(context.Context, *TraitWorkflowIdRequest) (*WorkflowInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraitWorkflowInstance not implemented")
}
func (UnimplementedContentServiceServer) GetTraitWorkflowStorageSystems(context.Context, *TraitWorkflowActivityIdRequest) (*WorkflowActivityStorageSystems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraitWorkflowStorageSystems not implemented")
}
func (UnimplementedContentServiceServer) GetTraitWorkflowPrompts(context.Context, *TraitWorkflowActivityIdRequest) (*WorkflowActivityPrompts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraitWorkflowPrompts not implemented")
}
func (UnimplementedContentServiceServer) GetRootCollectionItems(context.Context, *bosca.Empty) (*CollectionItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootCollectionItems not implemented")
}
func (UnimplementedContentServiceServer) GetCollectionItems(context.Context, *bosca.IdRequest) (*CollectionItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionItems not implemented")
}
func (UnimplementedContentServiceServer) AddCollection(context.Context, *AddCollectionRequest) (*bosca.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollection not implemented")
}
func (UnimplementedContentServiceServer) GetCollection(context.Context, *bosca.IdRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedContentServiceServer) DeleteCollection(context.Context, *bosca.IdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedContentServiceServer) GetCollectionPermissions(context.Context, *bosca.IdRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddCollectionPermission(context.Context, *Permission) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionPermission not implemented")
}
func (UnimplementedContentServiceServer) AddCollectionItem(context.Context, *AddCollectionItemRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionItem not implemented")
}
func (UnimplementedContentServiceServer) CheckPermission(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedContentServiceServer) GetMetadata(context.Context, *bosca.IdRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadatas(context.Context, *bosca.IdsRequest) (*Metadatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadatas not implemented")
}
func (UnimplementedContentServiceServer) AddMetadata(context.Context, *AddMetadataRequest) (*bosca.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadata not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataTrait(context.Context, *AddMetadataTraitRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataTrait not implemented")
}
func (UnimplementedContentServiceServer) DeleteMetadata(context.Context, *bosca.IdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataUploadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataUploadUrl not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataDownloadUrl(context.Context, *bosca.IdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataDownloadUrl not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataSupplementary(context.Context, *AddSupplementaryRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataSupplementary not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataSupplementaryDownloadUrl(context.Context, *SupplementaryIdRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataSupplementaryDownloadUrl not implemented")
}
func (UnimplementedContentServiceServer) DeleteMetadataSupplementary(context.Context, *SupplementaryIdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadataSupplementary not implemented")
}
func (UnimplementedContentServiceServer) SetMetadataUploaded(context.Context, *bosca.IdRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataUploaded not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataPermissions(context.Context, *bosca.IdRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataPermissions(context.Context, *Permissions) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataPermissions not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataPermission(context.Context, *Permission) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataPermission not implemented")
}
func (UnimplementedContentServiceServer) BeginTransitionWorkflow(context.Context, *TransitionWorkflowRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransitionWorkflow not implemented")
}
func (UnimplementedContentServiceServer) CompleteTransitionWorkflow(context.Context, *CompleteTransitionWorkflowRequest) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTransitionWorkflow not implemented")
}
func (UnimplementedContentServiceServer) AddMetadataRelationship(context.Context, *MetadataRelationship) (*bosca.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataRelationship not implemented")
}
func (UnimplementedContentServiceServer) GetMetadataRelationships(context.Context, *MetadataRelationshipIdRequest) (*MetadataRelationships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataRelationships not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetSources(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetSource(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetWorkflows(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetWorkflow(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetModels(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetPrompts(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetStorageSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetStorageSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetStorageSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetStorageSystems(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetStorageSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetStorageSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetStorageSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetStorageSystem(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetStorageSystemModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetStorageSystemModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetStorageSystemModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetStorageSystemModels(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetWorkflowState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetWorkflowState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetWorkflowState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetWorkflowState(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetWorkflowStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetWorkflowStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetWorkflowStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetWorkflowStates(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTraits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTraits(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTrait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTrait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTrait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTrait(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTraitWorkflowInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraitWorkflowIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTraitWorkflowInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTraitWorkflowInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTraitWorkflowInstance(ctx, req.(*TraitWorkflowIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTraitWorkflowStorageSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraitWorkflowActivityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTraitWorkflowStorageSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTraitWorkflowStorageSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTraitWorkflowStorageSystems(ctx, req.(*TraitWorkflowActivityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTraitWorkflowPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraitWorkflowActivityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTraitWorkflowPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTraitWorkflowPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTraitWorkflowPrompts(ctx, req.(*TraitWorkflowActivityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetRootCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetRootCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetRootCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetRootCollectionItems(ctx, req.(*bosca.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollectionItems(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollection(ctx, req.(*AddCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollection(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteCollection(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCollectionPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCollectionPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCollectionPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCollectionPermissions(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollectionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollectionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollectionPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollectionPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddCollectionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddCollectionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddCollectionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddCollectionItem(ctx, req.(*AddCollectionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CheckPermission(ctx, req.(*PermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadata(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadatas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadatas(ctx, req.(*bosca.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadata(ctx, req.(*AddMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataTrait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataTraitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataTrait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataTrait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataTrait(ctx, req.(*AddMetadataTraitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteMetadata(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataUploadUrl(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataDownloadUrl(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataSupplementary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSupplementaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataSupplementary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataSupplementary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataSupplementary(ctx, req.(*AddSupplementaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataSupplementaryDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataSupplementaryDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataSupplementaryDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataSupplementaryDownloadUrl(ctx, req.(*SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteMetadataSupplementary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplementaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteMetadataSupplementary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteMetadataSupplementary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteMetadataSupplementary(ctx, req.(*SupplementaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SetMetadataUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SetMetadataUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SetMetadataUploaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SetMetadataUploaded(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bosca.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataPermissions(ctx, req.(*bosca.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataPermissions(ctx, req.(*Permissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_BeginTransitionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).BeginTransitionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_BeginTransitionWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).BeginTransitionWorkflow(ctx, req.(*TransitionWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CompleteTransitionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTransitionWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CompleteTransitionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CompleteTransitionWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CompleteTransitionWorkflow(ctx, req.(*CompleteTransitionWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddMetadataRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddMetadataRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddMetadataRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddMetadataRelationship(ctx, req.(*MetadataRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetMetadataRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRelationshipIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetMetadataRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetMetadataRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetMetadataRelationships(ctx, req.(*MetadataRelationshipIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosca.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSources",
			Handler:    _ContentService_GetSources_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _ContentService_GetSource_Handler,
		},
		{
			MethodName: "GetWorkflows",
			Handler:    _ContentService_GetWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _ContentService_GetWorkflow_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _ContentService_GetModels_Handler,
		},
		{
			MethodName: "GetPrompts",
			Handler:    _ContentService_GetPrompts_Handler,
		},
		{
			MethodName: "GetStorageSystems",
			Handler:    _ContentService_GetStorageSystems_Handler,
		},
		{
			MethodName: "GetStorageSystem",
			Handler:    _ContentService_GetStorageSystem_Handler,
		},
		{
			MethodName: "GetStorageSystemModels",
			Handler:    _ContentService_GetStorageSystemModels_Handler,
		},
		{
			MethodName: "GetWorkflowState",
			Handler:    _ContentService_GetWorkflowState_Handler,
		},
		{
			MethodName: "GetWorkflowStates",
			Handler:    _ContentService_GetWorkflowStates_Handler,
		},
		{
			MethodName: "GetTraits",
			Handler:    _ContentService_GetTraits_Handler,
		},
		{
			MethodName: "GetTrait",
			Handler:    _ContentService_GetTrait_Handler,
		},
		{
			MethodName: "GetTraitWorkflowInstance",
			Handler:    _ContentService_GetTraitWorkflowInstance_Handler,
		},
		{
			MethodName: "GetTraitWorkflowStorageSystems",
			Handler:    _ContentService_GetTraitWorkflowStorageSystems_Handler,
		},
		{
			MethodName: "GetTraitWorkflowPrompts",
			Handler:    _ContentService_GetTraitWorkflowPrompts_Handler,
		},
		{
			MethodName: "GetRootCollectionItems",
			Handler:    _ContentService_GetRootCollectionItems_Handler,
		},
		{
			MethodName: "GetCollectionItems",
			Handler:    _ContentService_GetCollectionItems_Handler,
		},
		{
			MethodName: "AddCollection",
			Handler:    _ContentService_AddCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _ContentService_GetCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _ContentService_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollectionPermissions",
			Handler:    _ContentService_GetCollectionPermissions_Handler,
		},
		{
			MethodName: "AddCollectionPermission",
			Handler:    _ContentService_AddCollectionPermission_Handler,
		},
		{
			MethodName: "AddCollectionItem",
			Handler:    _ContentService_AddCollectionItem_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _ContentService_CheckPermission_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ContentService_GetMetadata_Handler,
		},
		{
			MethodName: "GetMetadatas",
			Handler:    _ContentService_GetMetadatas_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _ContentService_AddMetadata_Handler,
		},
		{
			MethodName: "AddMetadataTrait",
			Handler:    _ContentService_AddMetadataTrait_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _ContentService_DeleteMetadata_Handler,
		},
		{
			MethodName: "GetMetadataUploadUrl",
			Handler:    _ContentService_GetMetadataUploadUrl_Handler,
		},
		{
			MethodName: "GetMetadataDownloadUrl",
			Handler:    _ContentService_GetMetadataDownloadUrl_Handler,
		},
		{
			MethodName: "AddMetadataSupplementary",
			Handler:    _ContentService_AddMetadataSupplementary_Handler,
		},
		{
			MethodName: "GetMetadataSupplementaryDownloadUrl",
			Handler:    _ContentService_GetMetadataSupplementaryDownloadUrl_Handler,
		},
		{
			MethodName: "DeleteMetadataSupplementary",
			Handler:    _ContentService_DeleteMetadataSupplementary_Handler,
		},
		{
			MethodName: "SetMetadataUploaded",
			Handler:    _ContentService_SetMetadataUploaded_Handler,
		},
		{
			MethodName: "GetMetadataPermissions",
			Handler:    _ContentService_GetMetadataPermissions_Handler,
		},
		{
			MethodName: "AddMetadataPermissions",
			Handler:    _ContentService_AddMetadataPermissions_Handler,
		},
		{
			MethodName: "AddMetadataPermission",
			Handler:    _ContentService_AddMetadataPermission_Handler,
		},
		{
			MethodName: "BeginTransitionWorkflow",
			Handler:    _ContentService_BeginTransitionWorkflow_Handler,
		},
		{
			MethodName: "CompleteTransitionWorkflow",
			Handler:    _ContentService_CompleteTransitionWorkflow_Handler,
		},
		{
			MethodName: "AddMetadataRelationship",
			Handler:    _ContentService_AddMetadataRelationship_Handler,
		},
		{
			MethodName: "GetMetadataRelationships",
			Handler:    _ContentService_GetMetadataRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosca/content/content.proto",
}
