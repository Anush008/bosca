//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/workflow/execution_context.proto (package bosca.workflow, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Workflow } from "./workflows_pb";
import { WorkflowActivity, WorkflowActivityModel, WorkflowActivityPrompt, WorkflowActivityStorageSystem } from "./activities_pb";

/**
 * @generated from message bosca.workflow.WorkflowParentJobId
 */
export class WorkflowParentJobId extends Message<WorkflowParentJobId> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string queue = 2;
   */
  queue = "";

  constructor(data?: PartialMessage<WorkflowParentJobId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowParentJobId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowParentJobId {
    return new WorkflowParentJobId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowParentJobId {
    return new WorkflowParentJobId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowParentJobId {
    return new WorkflowParentJobId().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowParentJobId | PlainMessage<WorkflowParentJobId> | undefined, b: WorkflowParentJobId | PlainMessage<WorkflowParentJobId> | undefined): boolean {
    return proto3.util.equals(WorkflowParentJobId, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowExecutionRequest
 */
export class WorkflowExecutionRequest extends Message<WorkflowExecutionRequest> {
  /**
   * @generated from field: optional bosca.workflow.WorkflowParentJobId parent = 1;
   */
  parent?: WorkflowParentJobId;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: optional string metadata_id = 3;
   */
  metadataId?: string;

  /**
   * @generated from field: optional string collection_id = 4;
   */
  collectionId?: string;

  /**
   * @generated from field: optional string supplementary_id = 5;
   */
  supplementaryId?: string;

  /**
   * @generated from field: bool wait_for_completion = 6;
   */
  waitForCompletion = false;

  /**
   * @generated from field: map<string, string> context = 7;
   */
  context: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "message", T: WorkflowParentJobId, opt: true },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "supplementary_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "wait_for_completion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionRequest {
    return new WorkflowExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionRequest {
    return new WorkflowExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionRequest {
    return new WorkflowExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowExecutionRequest | PlainMessage<WorkflowExecutionRequest> | undefined, b: WorkflowExecutionRequest | PlainMessage<WorkflowExecutionRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowExecutionRequest, a, b);
  }
}

/**
 * @generated from message bosca.workflow.FindAndWorkflowExecutionRequest
 */
export class FindAndWorkflowExecutionRequest extends Message<FindAndWorkflowExecutionRequest> {
  /**
   * @generated from field: optional bosca.workflow.WorkflowParentJobId parent = 1;
   */
  parent?: WorkflowParentJobId;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: optional string metadata_id = 3;
   */
  metadataId?: string;

  /**
   * @generated from field: optional string collection_id = 4;
   */
  collectionId?: string;

  /**
   * @generated from field: bool wait_for_completion = 5;
   */
  waitForCompletion = false;

  /**
   * @generated from field: map<string, string> context = 6;
   */
  context: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> metadata_attributes = 7;
   */
  metadataAttributes: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> collection_attributes = 8;
   */
  collectionAttributes: { [key: string]: string } = {};

  constructor(data?: PartialMessage<FindAndWorkflowExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.FindAndWorkflowExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "message", T: WorkflowParentJobId, opt: true },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "wait_for_completion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "metadata_attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "collection_attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindAndWorkflowExecutionRequest {
    return new FindAndWorkflowExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAndWorkflowExecutionRequest {
    return new FindAndWorkflowExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindAndWorkflowExecutionRequest {
    return new FindAndWorkflowExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FindAndWorkflowExecutionRequest | PlainMessage<FindAndWorkflowExecutionRequest> | undefined, b: FindAndWorkflowExecutionRequest | PlainMessage<FindAndWorkflowExecutionRequest> | undefined): boolean {
    return proto3.util.equals(FindAndWorkflowExecutionRequest, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowEnqueueRequest
 */
export class WorkflowEnqueueRequest extends Message<WorkflowEnqueueRequest> {
  /**
   * @generated from field: optional bosca.workflow.WorkflowParentJobId parent = 1;
   */
  parent?: WorkflowParentJobId;

  /**
   * @generated from field: bosca.workflow.Workflow workflow = 2;
   */
  workflow?: Workflow;

  /**
   * @generated from field: repeated bosca.workflow.WorkflowJob jobs = 3;
   */
  jobs: WorkflowJob[] = [];

  /**
   * @generated from field: optional string metadata_id = 4;
   */
  metadataId?: string;

  /**
   * @generated from field: optional string collection_id = 5;
   */
  collectionId?: string;

  /**
   * @generated from field: optional string supplementary_id = 6;
   */
  supplementaryId?: string;

  /**
   * @generated from field: map<string, string> context = 7;
   */
  context: { [key: string]: string } = {};

  /**
   * @generated from field: bool wait_for_completion = 8;
   */
  waitForCompletion = false;

  constructor(data?: PartialMessage<WorkflowEnqueueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowEnqueueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "message", T: WorkflowParentJobId, opt: true },
    { no: 2, name: "workflow", kind: "message", T: Workflow },
    { no: 3, name: "jobs", kind: "message", T: WorkflowJob, repeated: true },
    { no: 4, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "supplementary_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "wait_for_completion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowEnqueueRequest {
    return new WorkflowEnqueueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowEnqueueRequest {
    return new WorkflowEnqueueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowEnqueueRequest {
    return new WorkflowEnqueueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowEnqueueRequest | PlainMessage<WorkflowEnqueueRequest> | undefined, b: WorkflowEnqueueRequest | PlainMessage<WorkflowEnqueueRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowEnqueueRequest, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowEnqueueResponses
 */
export class WorkflowEnqueueResponses extends Message<WorkflowEnqueueResponses> {
  /**
   * @generated from field: repeated bosca.workflow.WorkflowEnqueueResponse responses = 1;
   */
  responses: WorkflowEnqueueResponse[] = [];

  constructor(data?: PartialMessage<WorkflowEnqueueResponses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowEnqueueResponses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "responses", kind: "message", T: WorkflowEnqueueResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowEnqueueResponses {
    return new WorkflowEnqueueResponses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowEnqueueResponses {
    return new WorkflowEnqueueResponses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowEnqueueResponses {
    return new WorkflowEnqueueResponses().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowEnqueueResponses | PlainMessage<WorkflowEnqueueResponses> | undefined, b: WorkflowEnqueueResponses | PlainMessage<WorkflowEnqueueResponses> | undefined): boolean {
    return proto3.util.equals(WorkflowEnqueueResponses, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowEnqueueResponse
 */
export class WorkflowEnqueueResponse extends Message<WorkflowEnqueueResponse> {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  /**
   * @generated from field: bool complete = 3;
   */
  complete = false;

  /**
   * @generated from field: optional string error = 4;
   */
  error?: string;

  /**
   * @generated from field: map<string, string> context = 5;
   */
  context: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowEnqueueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowEnqueueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "complete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowEnqueueResponse {
    return new WorkflowEnqueueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowEnqueueResponse {
    return new WorkflowEnqueueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowEnqueueResponse {
    return new WorkflowEnqueueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowEnqueueResponse | PlainMessage<WorkflowEnqueueResponse> | undefined, b: WorkflowEnqueueResponse | PlainMessage<WorkflowEnqueueResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowEnqueueResponse, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowJob
 */
export class WorkflowJob extends Message<WorkflowJob> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: optional string collection_id = 2;
   */
  collectionId?: string;

  /**
   * @generated from field: optional string metadata_id = 3;
   */
  metadataId?: string;

  /**
   * @generated from field: optional string supplementary_id = 4;
   */
  supplementaryId?: string;

  /**
   * @generated from field: bosca.workflow.WorkflowActivity activity = 5;
   */
  activity?: WorkflowActivity;

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityPrompt prompts = 6;
   */
  prompts: WorkflowActivityPrompt[] = [];

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityStorageSystem storage_systems = 7;
   */
  storageSystems: WorkflowActivityStorageSystem[] = [];

  /**
   * @generated from field: repeated bosca.workflow.WorkflowActivityModel models = 8;
   */
  models: WorkflowActivityModel[] = [];

  /**
   * @generated from field: map<string, string> context = 9;
   */
  context: { [key: string]: string } = {};

  constructor(data?: PartialMessage<WorkflowJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "supplementary_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "activity", kind: "message", T: WorkflowActivity },
    { no: 6, name: "prompts", kind: "message", T: WorkflowActivityPrompt, repeated: true },
    { no: 7, name: "storage_systems", kind: "message", T: WorkflowActivityStorageSystem, repeated: true },
    { no: 8, name: "models", kind: "message", T: WorkflowActivityModel, repeated: true },
    { no: 9, name: "context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowJob {
    return new WorkflowJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowJob {
    return new WorkflowJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowJob {
    return new WorkflowJob().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowJob | PlainMessage<WorkflowJob> | undefined, b: WorkflowJob | PlainMessage<WorkflowJob> | undefined): boolean {
    return proto3.util.equals(WorkflowJob, a, b);
  }
}

