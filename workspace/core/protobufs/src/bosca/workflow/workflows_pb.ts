//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/workflow/workflows.proto (package bosca.workflow, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum bosca.workflow.WorkflowStateType
 */
export enum WorkflowStateType {
  /**
   * @generated from enum value: unknown_workflow_type = 0;
   */
  unknown_workflow_type = 0,

  /**
   * @generated from enum value: processing = 1;
   */
  processing = 1,

  /**
   * @generated from enum value: draft = 2;
   */
  draft = 2,

  /**
   * @generated from enum value: pending = 3;
   */
  pending = 3,

  /**
   * @generated from enum value: approval = 4;
   */
  approval = 4,

  /**
   * @generated from enum value: approved = 5;
   */
  approved = 5,

  /**
   * @generated from enum value: published = 6;
   */
  published = 6,

  /**
   * @generated from enum value: failure = 7;
   */
  failure = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkflowStateType)
proto3.util.setEnumType(WorkflowStateType, "bosca.workflow.WorkflowStateType", [
  { no: 0, name: "unknown_workflow_type" },
  { no: 1, name: "processing" },
  { no: 2, name: "draft" },
  { no: 3, name: "pending" },
  { no: 4, name: "approval" },
  { no: 5, name: "approved" },
  { no: 6, name: "published" },
  { no: 7, name: "failure" },
]);

/**
 * @generated from message bosca.workflow.Workflows
 */
export class Workflows extends Message<Workflows> {
  /**
   * @generated from field: repeated bosca.workflow.Workflow workflows = 1;
   */
  workflows: Workflow[] = [];

  constructor(data?: PartialMessage<Workflows>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.Workflows";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflows", kind: "message", T: Workflow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workflows {
    return new Workflows().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workflows {
    return new Workflows().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workflows {
    return new Workflows().fromJsonString(jsonString, options);
  }

  static equals(a: Workflows | PlainMessage<Workflows> | undefined, b: Workflows | PlainMessage<Workflows> | undefined): boolean {
    return proto3.util.equals(Workflows, a, b);
  }
}

/**
 * @generated from message bosca.workflow.Workflow
 */
export class Workflow extends Message<Workflow> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string queue = 4;
   */
  queue = "";

  /**
   * @generated from field: map<string, string> configuration = 5;
   */
  configuration: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Workflow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.Workflow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "queue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workflow {
    return new Workflow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workflow {
    return new Workflow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workflow {
    return new Workflow().fromJsonString(jsonString, options);
  }

  static equals(a: Workflow | PlainMessage<Workflow> | undefined, b: Workflow | PlainMessage<Workflow> | undefined): boolean {
    return proto3.util.equals(Workflow, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowStates
 */
export class WorkflowStates extends Message<WorkflowStates> {
  /**
   * @generated from field: repeated bosca.workflow.WorkflowState states = 1;
   */
  states: WorkflowState[] = [];

  constructor(data?: PartialMessage<WorkflowStates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowStates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "states", kind: "message", T: WorkflowState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowStates {
    return new WorkflowStates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowStates {
    return new WorkflowStates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowStates {
    return new WorkflowStates().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowStates | PlainMessage<WorkflowStates> | undefined, b: WorkflowStates | PlainMessage<WorkflowStates> | undefined): boolean {
    return proto3.util.equals(WorkflowStates, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowState
 */
export class WorkflowState extends Message<WorkflowState> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: bosca.workflow.WorkflowStateType type = 4;
   */
  type = WorkflowStateType.unknown_workflow_type;

  /**
   * @generated from field: map<string, string> configuration = 5;
   */
  configuration: { [key: string]: string } = {};

  /**
   * @generated from field: optional string workflow_id = 6;
   */
  workflowId?: string;

  /**
   * @generated from field: optional string entry_workflow_id = 7;
   */
  entryWorkflowId?: string;

  /**
   * @generated from field: optional string exit_workflow_id = 8;
   */
  exitWorkflowId?: string;

  constructor(data?: PartialMessage<WorkflowState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(WorkflowStateType) },
    { no: 5, name: "configuration", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "entry_workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "exit_workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowState {
    return new WorkflowState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowState {
    return new WorkflowState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowState {
    return new WorkflowState().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowState | PlainMessage<WorkflowState> | undefined, b: WorkflowState | PlainMessage<WorkflowState> | undefined): boolean {
    return proto3.util.equals(WorkflowState, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowStateTransitions
 */
export class WorkflowStateTransitions extends Message<WorkflowStateTransitions> {
  /**
   * @generated from field: repeated bosca.workflow.WorkflowStateTransition transitions = 1;
   */
  transitions: WorkflowStateTransition[] = [];

  constructor(data?: PartialMessage<WorkflowStateTransitions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowStateTransitions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transitions", kind: "message", T: WorkflowStateTransition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowStateTransitions {
    return new WorkflowStateTransitions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowStateTransitions {
    return new WorkflowStateTransitions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowStateTransitions {
    return new WorkflowStateTransitions().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowStateTransitions | PlainMessage<WorkflowStateTransitions> | undefined, b: WorkflowStateTransitions | PlainMessage<WorkflowStateTransitions> | undefined): boolean {
    return proto3.util.equals(WorkflowStateTransitions, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowStateTransition
 */
export class WorkflowStateTransition extends Message<WorkflowStateTransition> {
  /**
   * @generated from field: string from_state_id = 1;
   */
  fromStateId = "";

  /**
   * @generated from field: string to_state_id = 2;
   */
  toStateId = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<WorkflowStateTransition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowStateTransition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_state_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_state_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowStateTransition {
    return new WorkflowStateTransition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowStateTransition {
    return new WorkflowStateTransition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowStateTransition {
    return new WorkflowStateTransition().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowStateTransition | PlainMessage<WorkflowStateTransition> | undefined, b: WorkflowStateTransition | PlainMessage<WorkflowStateTransition> | undefined): boolean {
    return proto3.util.equals(WorkflowStateTransition, a, b);
  }
}

/**
 * @generated from message bosca.workflow.WorkflowJobInstance
 */
export class WorkflowJobInstance extends Message<WorkflowJobInstance> {
  /**
   * @generated from field: string json = 1;
   */
  json = "";

  constructor(data?: PartialMessage<WorkflowJobInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.WorkflowJobInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowJobInstance {
    return new WorkflowJobInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowJobInstance {
    return new WorkflowJobInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowJobInstance {
    return new WorkflowJobInstance().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowJobInstance | PlainMessage<WorkflowJobInstance> | undefined, b: WorkflowJobInstance | PlainMessage<WorkflowJobInstance> | undefined): boolean {
    return proto3.util.equals(WorkflowJobInstance, a, b);
  }
}

