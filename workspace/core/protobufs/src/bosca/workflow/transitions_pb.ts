//
// Copyright 2024 Sowers, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file bosca/workflow/transitions.proto (package bosca.workflow, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message bosca.workflow.BeginTransitionWorkflowRequest
 */
export class BeginTransitionWorkflowRequest extends Message<BeginTransitionWorkflowRequest> {
  /**
   * @generated from field: string metadata_id = 1;
   */
  metadataId = "";

  /**
   * @generated from field: int32 version = 2;
   */
  version = 0;

  /**
   * @generated from field: string state_id = 3;
   */
  stateId = "";

  /**
   * @generated from field: string status = 4;
   */
  status = "";

  /**
   * @generated from field: bool retry = 5;
   */
  retry = false;

  /**
   * @generated from field: optional string supplementaryId = 6;
   */
  supplementaryId?: string;

  constructor(data?: PartialMessage<BeginTransitionWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.BeginTransitionWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "state_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "retry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "supplementaryId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BeginTransitionWorkflowRequest {
    return new BeginTransitionWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BeginTransitionWorkflowRequest {
    return new BeginTransitionWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BeginTransitionWorkflowRequest {
    return new BeginTransitionWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BeginTransitionWorkflowRequest | PlainMessage<BeginTransitionWorkflowRequest> | undefined, b: BeginTransitionWorkflowRequest | PlainMessage<BeginTransitionWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(BeginTransitionWorkflowRequest, a, b);
  }
}

/**
 * @generated from message bosca.workflow.CompleteTransitionWorkflowRequest
 */
export class CompleteTransitionWorkflowRequest extends Message<CompleteTransitionWorkflowRequest> {
  /**
   * @generated from field: string metadata_id = 1;
   */
  metadataId = "";

  /**
   * @generated from field: int32 version = 2;
   */
  version = 0;

  /**
   * @generated from field: string status = 3;
   */
  status = "";

  /**
   * @generated from field: bool success = 4;
   */
  success = false;

  constructor(data?: PartialMessage<CompleteTransitionWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bosca.workflow.CompleteTransitionWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteTransitionWorkflowRequest {
    return new CompleteTransitionWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteTransitionWorkflowRequest {
    return new CompleteTransitionWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteTransitionWorkflowRequest {
    return new CompleteTransitionWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CompleteTransitionWorkflowRequest | PlainMessage<CompleteTransitionWorkflowRequest> | undefined, b: CompleteTransitionWorkflowRequest | PlainMessage<CompleteTransitionWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(CompleteTransitionWorkflowRequest, a, b);
  }
}

